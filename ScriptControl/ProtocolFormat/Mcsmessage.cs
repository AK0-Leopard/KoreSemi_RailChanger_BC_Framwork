// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mcsmessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace com.mirle.ibg3k0.sc.ProtocolFormat {

  /// <summary>Holder for reflection information generated from mcsmessage.proto</summary>
  public static partial class McsmessageReflection {

    #region Descriptor
    /// <summary>File descriptor for mcsmessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static McsmessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBtY3NtZXNzYWdlLnByb3RvEgh0dXRvcmlhbCKSAQoQU1lTVEVNRVZFTlRf",
            "SU5GTxIwCgZFVkVOVFMYASADKAsyIC50dXRvcmlhbC5TWVNURU1FVkVOVF9J",
            "TkZPLkVWRU5UGkwKBUVWRU5UEgwKBFRJTUUYASABKAkSCwoDTVNHGAIgASgJ",
            "EigKCU1TR19MRVZFTBgDIAEoDjIVLnR1dG9yaWFsLk1lc3NhZ2VUeXBlIuQB",
            "CgpBTEFSTV9JTkZPEioKBkFMQVJNUxgBIAMoCzIaLnR1dG9yaWFsLkFMQVJN",
            "X0lORk8uQUxBUk0aqQEKBUFMQVJNEg8KB0VRUFRfSUQYASABKAkSDwoHVU5J",
            "VF9OTxgCIAEoBRIVCg1SUFRfREFURV9USU1FGAMgASgJEhIKCkFMQVJNX0NP",
            "REUYBCABKAkSEQoJQUxBUk1fTFZMGAUgASgFEhIKCkFMQVJNX1NUQVQYBiAB",
            "KAUSGAoQQUxBUk1fQUZGRUNUX0NOVBgHIAEoBRISCgpBTEFSTV9ERVNDGAgg",
            "ASgJIvIBCghDTURfSU5GTxIkCgRDTURTGAEgAygLMhYudHV0b3JpYWwuQ01E",
            "X0lORk8uQ01EGr8BCgNDTUQSDwoHQ01EX1NOTxgBIAEoCRIRCglUSUNLRVRf",
            "Tk8YAiABKAkSEAoIQ01EX1NUQVQYAyABKAkSFAoMQ01EX0FCTk9STUFMGAQg",
            "ASgJEgwKBFBSVFkYBSABKAUSDAoERlJPTRgGIAEoCRIKCgJUTxgHIAEoCRIO",
            "CgZDUlJfSUQYCCABKAkSEAoIQ1JUX0RBVEUYCSABKAkSEAoIRVhQX0RBVEUY",
            "CiABKAkSEAoIRU5EX0RBVEUYCyABKAki0wEKDFNUS19DTURfSU5GTxIoCgRD",
            "TURTGAEgAygLMhoudHV0b3JpYWwuU1RLX0NNRF9JTkZPLkNNRBqYAQoDQ01E",
            "Eg8KB0NNRF9TTk8YASABKAkSDgoGU0VRX05PGAIgASgJEhAKCENNRF9TVEFU",
            "GAMgASgJEgwKBEZST00YBCABKAkSCgoCVE8YBSABKAkSDgoGQ1JSX0lEGAYg",
            "ASgJEhAKCENSVF9EQVRFGAcgASgJEhAKCEVYUF9EQVRFGAggASgJEhAKCEVO",
            "RF9EQVRFGAkgASgJIoIBCglMSU5FX0lORk8SDwoHTElORV9JRBgBIAEoCRIN",
            "CgVCQ19JRBgCIAEoCRIVCg1QTENfTElOS19TVEFUGAMgASgFEhUKDUNJTV9M",
            "SU5LX1NUQVQYBCABKAUSFAoMQ1JfQUxBUk1fQ05UGAUgASgFEhEKCU9QRVJf",
            "TU9ERRgGIAEoCSJACgdCQ19JTkZPEhIKCkJVSUxEX0RBVEUYASABKAkSDwoH",
            "VkVSU0lPThgCIAEoCRIQCghSVU5fVElNRRgDIAEoCSKZAQoORVFVSVBNRU5U",
            "X0lORk8SDwoHRVFQVF9JRBgBIAEoCRITCgtFUVBUX0FMSVZFVBgCIAEoBRIR",
            "CglFUVBUX1NUQVQYAyABKAUSEAoIQ0lNX01PREUYBCABKAUSEQoJT1BFUl9N",
            "T0RFGAUgASgFEhQKDEFMQVJNX0hBUFBFThgGIAEoBRITCgtXQVJOX0hBUFBF",
            "ThgHIAEoBSJlCghUSVBfSU5GTxIkCgRUSVBTGAEgAygLMhYudHV0b3JpYWwu",
            "VElQX0lORk8uVElQGjMKA1RJUBIMCgRUSU1FGAEgASgJEhEKCU1TR19MRVZF",
            "TBgCIAEoCRILCgNNU0cYAyABKAkqJQoLTWVzc2FnZVR5cGUSCwoHV0FSTklO",
            "RxAAEgkKBUFMQVJNEAFChgEKFGNvbS5leGFtcGxlLnR1dG9yaWFsQhFBZGRy",
            "ZXNzQm9va1Byb3Rvc1ABWitnaXRodWIuY29tL2dvbGFuZy9wcm90b2J1Zi9w",
            "dHlwZXMvdGltZXN0YW1w+AEBogIDR1BCqgIiY29tLm1pcmxlLmliZzNrMC5z",
            "Yy5Qcm90b2NvbEZvcm1hdGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.MessageType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.SYSTEMEVENT_INFO), global::com.mirle.ibg3k0.sc.ProtocolFormat.SYSTEMEVENT_INFO.Parser, new[]{ "EVENTS" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.SYSTEMEVENT_INFO.Types.EVENT), global::com.mirle.ibg3k0.sc.ProtocolFormat.SYSTEMEVENT_INFO.Types.EVENT.Parser, new[]{ "TIME", "MSG", "MSGLEVEL" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.ALARM_INFO), global::com.mirle.ibg3k0.sc.ProtocolFormat.ALARM_INFO.Parser, new[]{ "ALARMS" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.ALARM_INFO.Types.ALARM), global::com.mirle.ibg3k0.sc.ProtocolFormat.ALARM_INFO.Types.ALARM.Parser, new[]{ "EQPTID", "UNITNO", "RPTDATETIME", "ALARMCODE", "ALARMLVL", "ALARMSTAT", "ALARMAFFECTCNT", "ALARMDESC" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.CMD_INFO), global::com.mirle.ibg3k0.sc.ProtocolFormat.CMD_INFO.Parser, new[]{ "CMDS" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.CMD_INFO.Types.CMD), global::com.mirle.ibg3k0.sc.ProtocolFormat.CMD_INFO.Types.CMD.Parser, new[]{ "CMDSNO", "TICKETNO", "CMDSTAT", "CMDABNORMAL", "PRTY", "FROM", "TO", "CRRID", "CRTDATE", "EXPDATE", "ENDDATE" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.STK_CMD_INFO), global::com.mirle.ibg3k0.sc.ProtocolFormat.STK_CMD_INFO.Parser, new[]{ "CMDS" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.STK_CMD_INFO.Types.CMD), global::com.mirle.ibg3k0.sc.ProtocolFormat.STK_CMD_INFO.Types.CMD.Parser, new[]{ "CMDSNO", "SEQNO", "CMDSTAT", "FROM", "TO", "CRRID", "CRTDATE", "EXPDATE", "ENDDATE" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.LINE_INFO), global::com.mirle.ibg3k0.sc.ProtocolFormat.LINE_INFO.Parser, new[]{ "LINEID", "BCID", "PLCLINKSTAT", "CIMLINKSTAT", "CRALARMCNT", "OPERMODE" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.BC_INFO), global::com.mirle.ibg3k0.sc.ProtocolFormat.BC_INFO.Parser, new[]{ "BUILDDATE", "VERSION", "RUNTIME" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.EQUIPMENT_INFO), global::com.mirle.ibg3k0.sc.ProtocolFormat.EQUIPMENT_INFO.Parser, new[]{ "EQPTID", "EQPTALIVET", "EQPTSTAT", "CIMMODE", "OPERMODE", "ALARMHAPPEN", "WARNHAPPEN" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.TIP_INFO), global::com.mirle.ibg3k0.sc.ProtocolFormat.TIP_INFO.Parser, new[]{ "TIPS" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibg3k0.sc.ProtocolFormat.TIP_INFO.Types.TIP), global::com.mirle.ibg3k0.sc.ProtocolFormat.TIP_INFO.Types.TIP.Parser, new[]{ "TIME", "MSGLEVEL", "MSG" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum MessageType {
    [pbr::OriginalName("WARNING")] Warning = 0,
    [pbr::OriginalName("ALARM")] Alarm = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  [START messages]
  /// </summary>
  public sealed partial class SYSTEMEVENT_INFO : pb::IMessage<SYSTEMEVENT_INFO> {
    private static readonly pb::MessageParser<SYSTEMEVENT_INFO> _parser = new pb::MessageParser<SYSTEMEVENT_INFO>(() => new SYSTEMEVENT_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SYSTEMEVENT_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.McsmessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SYSTEMEVENT_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SYSTEMEVENT_INFO(SYSTEMEVENT_INFO other) : this() {
      eVENTS_ = other.eVENTS_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SYSTEMEVENT_INFO Clone() {
      return new SYSTEMEVENT_INFO(this);
    }

    /// <summary>Field number for the "EVENTS" field.</summary>
    public const int EVENTSFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.mirle.ibg3k0.sc.ProtocolFormat.SYSTEMEVENT_INFO.Types.EVENT> _repeated_eVENTS_codec
        = pb::FieldCodec.ForMessage(10, global::com.mirle.ibg3k0.sc.ProtocolFormat.SYSTEMEVENT_INFO.Types.EVENT.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.SYSTEMEVENT_INFO.Types.EVENT> eVENTS_ = new pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.SYSTEMEVENT_INFO.Types.EVENT>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.SYSTEMEVENT_INFO.Types.EVENT> EVENTS {
      get { return eVENTS_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SYSTEMEVENT_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SYSTEMEVENT_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!eVENTS_.Equals(other.eVENTS_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= eVENTS_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      eVENTS_.WriteTo(output, _repeated_eVENTS_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eVENTS_.CalculateSize(_repeated_eVENTS_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SYSTEMEVENT_INFO other) {
      if (other == null) {
        return;
      }
      eVENTS_.Add(other.eVENTS_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            eVENTS_.AddEntriesFrom(input, _repeated_eVENTS_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SYSTEMEVENT_INFO message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class EVENT : pb::IMessage<EVENT> {
        private static readonly pb::MessageParser<EVENT> _parser = new pb::MessageParser<EVENT>(() => new EVENT());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EVENT> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.SYSTEMEVENT_INFO.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EVENT() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EVENT(EVENT other) : this() {
          tIME_ = other.tIME_;
          mSG_ = other.mSG_;
          mSGLEVEL_ = other.mSGLEVEL_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EVENT Clone() {
          return new EVENT(this);
        }

        /// <summary>Field number for the "TIME" field.</summary>
        public const int TIMEFieldNumber = 1;
        private string tIME_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TIME {
          get { return tIME_; }
          set {
            tIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "MSG" field.</summary>
        public const int MSGFieldNumber = 2;
        private string mSG_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MSG {
          get { return mSG_; }
          set {
            mSG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "MSG_LEVEL" field.</summary>
        public const int MSGLEVELFieldNumber = 3;
        private global::com.mirle.ibg3k0.sc.ProtocolFormat.MessageType mSGLEVEL_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::com.mirle.ibg3k0.sc.ProtocolFormat.MessageType MSGLEVEL {
          get { return mSGLEVEL_; }
          set {
            mSGLEVEL_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EVENT);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EVENT other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TIME != other.TIME) return false;
          if (MSG != other.MSG) return false;
          if (MSGLEVEL != other.MSGLEVEL) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (TIME.Length != 0) hash ^= TIME.GetHashCode();
          if (MSG.Length != 0) hash ^= MSG.GetHashCode();
          if (MSGLEVEL != 0) hash ^= MSGLEVEL.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (TIME.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(TIME);
          }
          if (MSG.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(MSG);
          }
          if (MSGLEVEL != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) MSGLEVEL);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TIME.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TIME);
          }
          if (MSG.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MSG);
          }
          if (MSGLEVEL != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MSGLEVEL);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EVENT other) {
          if (other == null) {
            return;
          }
          if (other.TIME.Length != 0) {
            TIME = other.TIME;
          }
          if (other.MSG.Length != 0) {
            MSG = other.MSG;
          }
          if (other.MSGLEVEL != 0) {
            MSGLEVEL = other.MSGLEVEL;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                TIME = input.ReadString();
                break;
              }
              case 18: {
                MSG = input.ReadString();
                break;
              }
              case 24: {
                mSGLEVEL_ = (global::com.mirle.ibg3k0.sc.ProtocolFormat.MessageType) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ALARM_INFO : pb::IMessage<ALARM_INFO> {
    private static readonly pb::MessageParser<ALARM_INFO> _parser = new pb::MessageParser<ALARM_INFO>(() => new ALARM_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ALARM_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.McsmessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ALARM_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ALARM_INFO(ALARM_INFO other) : this() {
      aLARMS_ = other.aLARMS_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ALARM_INFO Clone() {
      return new ALARM_INFO(this);
    }

    /// <summary>Field number for the "ALARMS" field.</summary>
    public const int ALARMSFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.mirle.ibg3k0.sc.ProtocolFormat.ALARM_INFO.Types.ALARM> _repeated_aLARMS_codec
        = pb::FieldCodec.ForMessage(10, global::com.mirle.ibg3k0.sc.ProtocolFormat.ALARM_INFO.Types.ALARM.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.ALARM_INFO.Types.ALARM> aLARMS_ = new pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.ALARM_INFO.Types.ALARM>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.ALARM_INFO.Types.ALARM> ALARMS {
      get { return aLARMS_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ALARM_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ALARM_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!aLARMS_.Equals(other.aLARMS_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= aLARMS_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      aLARMS_.WriteTo(output, _repeated_aLARMS_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += aLARMS_.CalculateSize(_repeated_aLARMS_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ALARM_INFO other) {
      if (other == null) {
        return;
      }
      aLARMS_.Add(other.aLARMS_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            aLARMS_.AddEntriesFrom(input, _repeated_aLARMS_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ALARM_INFO message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ALARM : pb::IMessage<ALARM> {
        private static readonly pb::MessageParser<ALARM> _parser = new pb::MessageParser<ALARM>(() => new ALARM());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ALARM> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.ALARM_INFO.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ALARM() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ALARM(ALARM other) : this() {
          eQPTID_ = other.eQPTID_;
          uNITNO_ = other.uNITNO_;
          rPTDATETIME_ = other.rPTDATETIME_;
          aLARMCODE_ = other.aLARMCODE_;
          aLARMLVL_ = other.aLARMLVL_;
          aLARMSTAT_ = other.aLARMSTAT_;
          aLARMAFFECTCNT_ = other.aLARMAFFECTCNT_;
          aLARMDESC_ = other.aLARMDESC_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ALARM Clone() {
          return new ALARM(this);
        }

        /// <summary>Field number for the "EQPT_ID" field.</summary>
        public const int EQPTIDFieldNumber = 1;
        private string eQPTID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EQPTID {
          get { return eQPTID_; }
          set {
            eQPTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "UNIT_NO" field.</summary>
        public const int UNITNOFieldNumber = 2;
        private int uNITNO_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int UNITNO {
          get { return uNITNO_; }
          set {
            uNITNO_ = value;
          }
        }

        /// <summary>Field number for the "RPT_DATE_TIME" field.</summary>
        public const int RPTDATETIMEFieldNumber = 3;
        private string rPTDATETIME_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RPTDATETIME {
          get { return rPTDATETIME_; }
          set {
            rPTDATETIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ALARM_CODE" field.</summary>
        public const int ALARMCODEFieldNumber = 4;
        private string aLARMCODE_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ALARMCODE {
          get { return aLARMCODE_; }
          set {
            aLARMCODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ALARM_LVL" field.</summary>
        public const int ALARMLVLFieldNumber = 5;
        private int aLARMLVL_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ALARMLVL {
          get { return aLARMLVL_; }
          set {
            aLARMLVL_ = value;
          }
        }

        /// <summary>Field number for the "ALARM_STAT" field.</summary>
        public const int ALARMSTATFieldNumber = 6;
        private int aLARMSTAT_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ALARMSTAT {
          get { return aLARMSTAT_; }
          set {
            aLARMSTAT_ = value;
          }
        }

        /// <summary>Field number for the "ALARM_AFFECT_CNT" field.</summary>
        public const int ALARMAFFECTCNTFieldNumber = 7;
        private int aLARMAFFECTCNT_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ALARMAFFECTCNT {
          get { return aLARMAFFECTCNT_; }
          set {
            aLARMAFFECTCNT_ = value;
          }
        }

        /// <summary>Field number for the "ALARM_DESC" field.</summary>
        public const int ALARMDESCFieldNumber = 8;
        private string aLARMDESC_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ALARMDESC {
          get { return aLARMDESC_; }
          set {
            aLARMDESC_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ALARM);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ALARM other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (EQPTID != other.EQPTID) return false;
          if (UNITNO != other.UNITNO) return false;
          if (RPTDATETIME != other.RPTDATETIME) return false;
          if (ALARMCODE != other.ALARMCODE) return false;
          if (ALARMLVL != other.ALARMLVL) return false;
          if (ALARMSTAT != other.ALARMSTAT) return false;
          if (ALARMAFFECTCNT != other.ALARMAFFECTCNT) return false;
          if (ALARMDESC != other.ALARMDESC) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (EQPTID.Length != 0) hash ^= EQPTID.GetHashCode();
          if (UNITNO != 0) hash ^= UNITNO.GetHashCode();
          if (RPTDATETIME.Length != 0) hash ^= RPTDATETIME.GetHashCode();
          if (ALARMCODE.Length != 0) hash ^= ALARMCODE.GetHashCode();
          if (ALARMLVL != 0) hash ^= ALARMLVL.GetHashCode();
          if (ALARMSTAT != 0) hash ^= ALARMSTAT.GetHashCode();
          if (ALARMAFFECTCNT != 0) hash ^= ALARMAFFECTCNT.GetHashCode();
          if (ALARMDESC.Length != 0) hash ^= ALARMDESC.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (EQPTID.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(EQPTID);
          }
          if (UNITNO != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(UNITNO);
          }
          if (RPTDATETIME.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(RPTDATETIME);
          }
          if (ALARMCODE.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(ALARMCODE);
          }
          if (ALARMLVL != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(ALARMLVL);
          }
          if (ALARMSTAT != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(ALARMSTAT);
          }
          if (ALARMAFFECTCNT != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(ALARMAFFECTCNT);
          }
          if (ALARMDESC.Length != 0) {
            output.WriteRawTag(66);
            output.WriteString(ALARMDESC);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (EQPTID.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EQPTID);
          }
          if (UNITNO != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(UNITNO);
          }
          if (RPTDATETIME.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RPTDATETIME);
          }
          if (ALARMCODE.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ALARMCODE);
          }
          if (ALARMLVL != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ALARMLVL);
          }
          if (ALARMSTAT != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ALARMSTAT);
          }
          if (ALARMAFFECTCNT != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ALARMAFFECTCNT);
          }
          if (ALARMDESC.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ALARMDESC);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ALARM other) {
          if (other == null) {
            return;
          }
          if (other.EQPTID.Length != 0) {
            EQPTID = other.EQPTID;
          }
          if (other.UNITNO != 0) {
            UNITNO = other.UNITNO;
          }
          if (other.RPTDATETIME.Length != 0) {
            RPTDATETIME = other.RPTDATETIME;
          }
          if (other.ALARMCODE.Length != 0) {
            ALARMCODE = other.ALARMCODE;
          }
          if (other.ALARMLVL != 0) {
            ALARMLVL = other.ALARMLVL;
          }
          if (other.ALARMSTAT != 0) {
            ALARMSTAT = other.ALARMSTAT;
          }
          if (other.ALARMAFFECTCNT != 0) {
            ALARMAFFECTCNT = other.ALARMAFFECTCNT;
          }
          if (other.ALARMDESC.Length != 0) {
            ALARMDESC = other.ALARMDESC;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                EQPTID = input.ReadString();
                break;
              }
              case 16: {
                UNITNO = input.ReadInt32();
                break;
              }
              case 26: {
                RPTDATETIME = input.ReadString();
                break;
              }
              case 34: {
                ALARMCODE = input.ReadString();
                break;
              }
              case 40: {
                ALARMLVL = input.ReadInt32();
                break;
              }
              case 48: {
                ALARMSTAT = input.ReadInt32();
                break;
              }
              case 56: {
                ALARMAFFECTCNT = input.ReadInt32();
                break;
              }
              case 66: {
                ALARMDESC = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CMD_INFO : pb::IMessage<CMD_INFO> {
    private static readonly pb::MessageParser<CMD_INFO> _parser = new pb::MessageParser<CMD_INFO>(() => new CMD_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.McsmessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_INFO(CMD_INFO other) : this() {
      cMDS_ = other.cMDS_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_INFO Clone() {
      return new CMD_INFO(this);
    }

    /// <summary>Field number for the "CMDS" field.</summary>
    public const int CMDSFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.mirle.ibg3k0.sc.ProtocolFormat.CMD_INFO.Types.CMD> _repeated_cMDS_codec
        = pb::FieldCodec.ForMessage(10, global::com.mirle.ibg3k0.sc.ProtocolFormat.CMD_INFO.Types.CMD.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.CMD_INFO.Types.CMD> cMDS_ = new pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.CMD_INFO.Types.CMD>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.CMD_INFO.Types.CMD> CMDS {
      get { return cMDS_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cMDS_.Equals(other.cMDS_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cMDS_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cMDS_.WriteTo(output, _repeated_cMDS_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cMDS_.CalculateSize(_repeated_cMDS_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_INFO other) {
      if (other == null) {
        return;
      }
      cMDS_.Add(other.cMDS_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cMDS_.AddEntriesFrom(input, _repeated_cMDS_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CMD_INFO message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class CMD : pb::IMessage<CMD> {
        private static readonly pb::MessageParser<CMD> _parser = new pb::MessageParser<CMD>(() => new CMD());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CMD> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.CMD_INFO.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CMD() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CMD(CMD other) : this() {
          cMDSNO_ = other.cMDSNO_;
          tICKETNO_ = other.tICKETNO_;
          cMDSTAT_ = other.cMDSTAT_;
          cMDABNORMAL_ = other.cMDABNORMAL_;
          pRTY_ = other.pRTY_;
          fROM_ = other.fROM_;
          tO_ = other.tO_;
          cRRID_ = other.cRRID_;
          cRTDATE_ = other.cRTDATE_;
          eXPDATE_ = other.eXPDATE_;
          eNDDATE_ = other.eNDDATE_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CMD Clone() {
          return new CMD(this);
        }

        /// <summary>Field number for the "CMD_SNO" field.</summary>
        public const int CMDSNOFieldNumber = 1;
        private string cMDSNO_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CMDSNO {
          get { return cMDSNO_; }
          set {
            cMDSNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "TICKET_NO" field.</summary>
        public const int TICKETNOFieldNumber = 2;
        private string tICKETNO_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TICKETNO {
          get { return tICKETNO_; }
          set {
            tICKETNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "CMD_STAT" field.</summary>
        public const int CMDSTATFieldNumber = 3;
        private string cMDSTAT_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CMDSTAT {
          get { return cMDSTAT_; }
          set {
            cMDSTAT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "CMD_ABNORMAL" field.</summary>
        public const int CMDABNORMALFieldNumber = 4;
        private string cMDABNORMAL_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CMDABNORMAL {
          get { return cMDABNORMAL_; }
          set {
            cMDABNORMAL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "PRTY" field.</summary>
        public const int PRTYFieldNumber = 5;
        private int pRTY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PRTY {
          get { return pRTY_; }
          set {
            pRTY_ = value;
          }
        }

        /// <summary>Field number for the "FROM" field.</summary>
        public const int FROMFieldNumber = 6;
        private string fROM_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FROM {
          get { return fROM_; }
          set {
            fROM_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "TO" field.</summary>
        public const int TOFieldNumber = 7;
        private string tO_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TO {
          get { return tO_; }
          set {
            tO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "CRR_ID" field.</summary>
        public const int CRRIDFieldNumber = 8;
        private string cRRID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CRRID {
          get { return cRRID_; }
          set {
            cRRID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "CRT_DATE" field.</summary>
        public const int CRTDATEFieldNumber = 9;
        private string cRTDATE_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CRTDATE {
          get { return cRTDATE_; }
          set {
            cRTDATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "EXP_DATE" field.</summary>
        public const int EXPDATEFieldNumber = 10;
        private string eXPDATE_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EXPDATE {
          get { return eXPDATE_; }
          set {
            eXPDATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "END_DATE" field.</summary>
        public const int ENDDATEFieldNumber = 11;
        private string eNDDATE_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ENDDATE {
          get { return eNDDATE_; }
          set {
            eNDDATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CMD);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CMD other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CMDSNO != other.CMDSNO) return false;
          if (TICKETNO != other.TICKETNO) return false;
          if (CMDSTAT != other.CMDSTAT) return false;
          if (CMDABNORMAL != other.CMDABNORMAL) return false;
          if (PRTY != other.PRTY) return false;
          if (FROM != other.FROM) return false;
          if (TO != other.TO) return false;
          if (CRRID != other.CRRID) return false;
          if (CRTDATE != other.CRTDATE) return false;
          if (EXPDATE != other.EXPDATE) return false;
          if (ENDDATE != other.ENDDATE) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CMDSNO.Length != 0) hash ^= CMDSNO.GetHashCode();
          if (TICKETNO.Length != 0) hash ^= TICKETNO.GetHashCode();
          if (CMDSTAT.Length != 0) hash ^= CMDSTAT.GetHashCode();
          if (CMDABNORMAL.Length != 0) hash ^= CMDABNORMAL.GetHashCode();
          if (PRTY != 0) hash ^= PRTY.GetHashCode();
          if (FROM.Length != 0) hash ^= FROM.GetHashCode();
          if (TO.Length != 0) hash ^= TO.GetHashCode();
          if (CRRID.Length != 0) hash ^= CRRID.GetHashCode();
          if (CRTDATE.Length != 0) hash ^= CRTDATE.GetHashCode();
          if (EXPDATE.Length != 0) hash ^= EXPDATE.GetHashCode();
          if (ENDDATE.Length != 0) hash ^= ENDDATE.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CMDSNO.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(CMDSNO);
          }
          if (TICKETNO.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(TICKETNO);
          }
          if (CMDSTAT.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(CMDSTAT);
          }
          if (CMDABNORMAL.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(CMDABNORMAL);
          }
          if (PRTY != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(PRTY);
          }
          if (FROM.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(FROM);
          }
          if (TO.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(TO);
          }
          if (CRRID.Length != 0) {
            output.WriteRawTag(66);
            output.WriteString(CRRID);
          }
          if (CRTDATE.Length != 0) {
            output.WriteRawTag(74);
            output.WriteString(CRTDATE);
          }
          if (EXPDATE.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(EXPDATE);
          }
          if (ENDDATE.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(ENDDATE);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CMDSNO.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CMDSNO);
          }
          if (TICKETNO.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TICKETNO);
          }
          if (CMDSTAT.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CMDSTAT);
          }
          if (CMDABNORMAL.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CMDABNORMAL);
          }
          if (PRTY != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PRTY);
          }
          if (FROM.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FROM);
          }
          if (TO.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TO);
          }
          if (CRRID.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CRRID);
          }
          if (CRTDATE.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CRTDATE);
          }
          if (EXPDATE.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EXPDATE);
          }
          if (ENDDATE.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ENDDATE);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CMD other) {
          if (other == null) {
            return;
          }
          if (other.CMDSNO.Length != 0) {
            CMDSNO = other.CMDSNO;
          }
          if (other.TICKETNO.Length != 0) {
            TICKETNO = other.TICKETNO;
          }
          if (other.CMDSTAT.Length != 0) {
            CMDSTAT = other.CMDSTAT;
          }
          if (other.CMDABNORMAL.Length != 0) {
            CMDABNORMAL = other.CMDABNORMAL;
          }
          if (other.PRTY != 0) {
            PRTY = other.PRTY;
          }
          if (other.FROM.Length != 0) {
            FROM = other.FROM;
          }
          if (other.TO.Length != 0) {
            TO = other.TO;
          }
          if (other.CRRID.Length != 0) {
            CRRID = other.CRRID;
          }
          if (other.CRTDATE.Length != 0) {
            CRTDATE = other.CRTDATE;
          }
          if (other.EXPDATE.Length != 0) {
            EXPDATE = other.EXPDATE;
          }
          if (other.ENDDATE.Length != 0) {
            ENDDATE = other.ENDDATE;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                CMDSNO = input.ReadString();
                break;
              }
              case 18: {
                TICKETNO = input.ReadString();
                break;
              }
              case 26: {
                CMDSTAT = input.ReadString();
                break;
              }
              case 34: {
                CMDABNORMAL = input.ReadString();
                break;
              }
              case 40: {
                PRTY = input.ReadInt32();
                break;
              }
              case 50: {
                FROM = input.ReadString();
                break;
              }
              case 58: {
                TO = input.ReadString();
                break;
              }
              case 66: {
                CRRID = input.ReadString();
                break;
              }
              case 74: {
                CRTDATE = input.ReadString();
                break;
              }
              case 82: {
                EXPDATE = input.ReadString();
                break;
              }
              case 90: {
                ENDDATE = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class STK_CMD_INFO : pb::IMessage<STK_CMD_INFO> {
    private static readonly pb::MessageParser<STK_CMD_INFO> _parser = new pb::MessageParser<STK_CMD_INFO>(() => new STK_CMD_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<STK_CMD_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.McsmessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STK_CMD_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STK_CMD_INFO(STK_CMD_INFO other) : this() {
      cMDS_ = other.cMDS_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STK_CMD_INFO Clone() {
      return new STK_CMD_INFO(this);
    }

    /// <summary>Field number for the "CMDS" field.</summary>
    public const int CMDSFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.mirle.ibg3k0.sc.ProtocolFormat.STK_CMD_INFO.Types.CMD> _repeated_cMDS_codec
        = pb::FieldCodec.ForMessage(10, global::com.mirle.ibg3k0.sc.ProtocolFormat.STK_CMD_INFO.Types.CMD.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.STK_CMD_INFO.Types.CMD> cMDS_ = new pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.STK_CMD_INFO.Types.CMD>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.STK_CMD_INFO.Types.CMD> CMDS {
      get { return cMDS_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as STK_CMD_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(STK_CMD_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cMDS_.Equals(other.cMDS_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cMDS_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cMDS_.WriteTo(output, _repeated_cMDS_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cMDS_.CalculateSize(_repeated_cMDS_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(STK_CMD_INFO other) {
      if (other == null) {
        return;
      }
      cMDS_.Add(other.cMDS_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cMDS_.AddEntriesFrom(input, _repeated_cMDS_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the STK_CMD_INFO message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class CMD : pb::IMessage<CMD> {
        private static readonly pb::MessageParser<CMD> _parser = new pb::MessageParser<CMD>(() => new CMD());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CMD> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.STK_CMD_INFO.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CMD() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CMD(CMD other) : this() {
          cMDSNO_ = other.cMDSNO_;
          sEQNO_ = other.sEQNO_;
          cMDSTAT_ = other.cMDSTAT_;
          fROM_ = other.fROM_;
          tO_ = other.tO_;
          cRRID_ = other.cRRID_;
          cRTDATE_ = other.cRTDATE_;
          eXPDATE_ = other.eXPDATE_;
          eNDDATE_ = other.eNDDATE_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CMD Clone() {
          return new CMD(this);
        }

        /// <summary>Field number for the "CMD_SNO" field.</summary>
        public const int CMDSNOFieldNumber = 1;
        private string cMDSNO_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CMDSNO {
          get { return cMDSNO_; }
          set {
            cMDSNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "SEQ_NO" field.</summary>
        public const int SEQNOFieldNumber = 2;
        private string sEQNO_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SEQNO {
          get { return sEQNO_; }
          set {
            sEQNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "CMD_STAT" field.</summary>
        public const int CMDSTATFieldNumber = 3;
        private string cMDSTAT_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CMDSTAT {
          get { return cMDSTAT_; }
          set {
            cMDSTAT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "FROM" field.</summary>
        public const int FROMFieldNumber = 4;
        private string fROM_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FROM {
          get { return fROM_; }
          set {
            fROM_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "TO" field.</summary>
        public const int TOFieldNumber = 5;
        private string tO_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TO {
          get { return tO_; }
          set {
            tO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "CRR_ID" field.</summary>
        public const int CRRIDFieldNumber = 6;
        private string cRRID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CRRID {
          get { return cRRID_; }
          set {
            cRRID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "CRT_DATE" field.</summary>
        public const int CRTDATEFieldNumber = 7;
        private string cRTDATE_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CRTDATE {
          get { return cRTDATE_; }
          set {
            cRTDATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "EXP_DATE" field.</summary>
        public const int EXPDATEFieldNumber = 8;
        private string eXPDATE_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EXPDATE {
          get { return eXPDATE_; }
          set {
            eXPDATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "END_DATE" field.</summary>
        public const int ENDDATEFieldNumber = 9;
        private string eNDDATE_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ENDDATE {
          get { return eNDDATE_; }
          set {
            eNDDATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CMD);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CMD other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CMDSNO != other.CMDSNO) return false;
          if (SEQNO != other.SEQNO) return false;
          if (CMDSTAT != other.CMDSTAT) return false;
          if (FROM != other.FROM) return false;
          if (TO != other.TO) return false;
          if (CRRID != other.CRRID) return false;
          if (CRTDATE != other.CRTDATE) return false;
          if (EXPDATE != other.EXPDATE) return false;
          if (ENDDATE != other.ENDDATE) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CMDSNO.Length != 0) hash ^= CMDSNO.GetHashCode();
          if (SEQNO.Length != 0) hash ^= SEQNO.GetHashCode();
          if (CMDSTAT.Length != 0) hash ^= CMDSTAT.GetHashCode();
          if (FROM.Length != 0) hash ^= FROM.GetHashCode();
          if (TO.Length != 0) hash ^= TO.GetHashCode();
          if (CRRID.Length != 0) hash ^= CRRID.GetHashCode();
          if (CRTDATE.Length != 0) hash ^= CRTDATE.GetHashCode();
          if (EXPDATE.Length != 0) hash ^= EXPDATE.GetHashCode();
          if (ENDDATE.Length != 0) hash ^= ENDDATE.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CMDSNO.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(CMDSNO);
          }
          if (SEQNO.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(SEQNO);
          }
          if (CMDSTAT.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(CMDSTAT);
          }
          if (FROM.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(FROM);
          }
          if (TO.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(TO);
          }
          if (CRRID.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(CRRID);
          }
          if (CRTDATE.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(CRTDATE);
          }
          if (EXPDATE.Length != 0) {
            output.WriteRawTag(66);
            output.WriteString(EXPDATE);
          }
          if (ENDDATE.Length != 0) {
            output.WriteRawTag(74);
            output.WriteString(ENDDATE);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CMDSNO.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CMDSNO);
          }
          if (SEQNO.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SEQNO);
          }
          if (CMDSTAT.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CMDSTAT);
          }
          if (FROM.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FROM);
          }
          if (TO.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TO);
          }
          if (CRRID.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CRRID);
          }
          if (CRTDATE.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CRTDATE);
          }
          if (EXPDATE.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EXPDATE);
          }
          if (ENDDATE.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ENDDATE);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CMD other) {
          if (other == null) {
            return;
          }
          if (other.CMDSNO.Length != 0) {
            CMDSNO = other.CMDSNO;
          }
          if (other.SEQNO.Length != 0) {
            SEQNO = other.SEQNO;
          }
          if (other.CMDSTAT.Length != 0) {
            CMDSTAT = other.CMDSTAT;
          }
          if (other.FROM.Length != 0) {
            FROM = other.FROM;
          }
          if (other.TO.Length != 0) {
            TO = other.TO;
          }
          if (other.CRRID.Length != 0) {
            CRRID = other.CRRID;
          }
          if (other.CRTDATE.Length != 0) {
            CRTDATE = other.CRTDATE;
          }
          if (other.EXPDATE.Length != 0) {
            EXPDATE = other.EXPDATE;
          }
          if (other.ENDDATE.Length != 0) {
            ENDDATE = other.ENDDATE;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                CMDSNO = input.ReadString();
                break;
              }
              case 18: {
                SEQNO = input.ReadString();
                break;
              }
              case 26: {
                CMDSTAT = input.ReadString();
                break;
              }
              case 34: {
                FROM = input.ReadString();
                break;
              }
              case 42: {
                TO = input.ReadString();
                break;
              }
              case 50: {
                CRRID = input.ReadString();
                break;
              }
              case 58: {
                CRTDATE = input.ReadString();
                break;
              }
              case 66: {
                EXPDATE = input.ReadString();
                break;
              }
              case 74: {
                ENDDATE = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class LINE_INFO : pb::IMessage<LINE_INFO> {
    private static readonly pb::MessageParser<LINE_INFO> _parser = new pb::MessageParser<LINE_INFO>(() => new LINE_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LINE_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.McsmessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LINE_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LINE_INFO(LINE_INFO other) : this() {
      lINEID_ = other.lINEID_;
      bCID_ = other.bCID_;
      pLCLINKSTAT_ = other.pLCLINKSTAT_;
      cIMLINKSTAT_ = other.cIMLINKSTAT_;
      cRALARMCNT_ = other.cRALARMCNT_;
      oPERMODE_ = other.oPERMODE_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LINE_INFO Clone() {
      return new LINE_INFO(this);
    }

    /// <summary>Field number for the "LINE_ID" field.</summary>
    public const int LINEIDFieldNumber = 1;
    private string lINEID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LINEID {
      get { return lINEID_; }
      set {
        lINEID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BC_ID" field.</summary>
    public const int BCIDFieldNumber = 2;
    private string bCID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BCID {
      get { return bCID_; }
      set {
        bCID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PLC_LINK_STAT" field.</summary>
    public const int PLCLINKSTATFieldNumber = 3;
    private int pLCLINKSTAT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PLCLINKSTAT {
      get { return pLCLINKSTAT_; }
      set {
        pLCLINKSTAT_ = value;
      }
    }

    /// <summary>Field number for the "CIM_LINK_STAT" field.</summary>
    public const int CIMLINKSTATFieldNumber = 4;
    private int cIMLINKSTAT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CIMLINKSTAT {
      get { return cIMLINKSTAT_; }
      set {
        cIMLINKSTAT_ = value;
      }
    }

    /// <summary>Field number for the "CR_ALARM_CNT" field.</summary>
    public const int CRALARMCNTFieldNumber = 5;
    private int cRALARMCNT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CRALARMCNT {
      get { return cRALARMCNT_; }
      set {
        cRALARMCNT_ = value;
      }
    }

    /// <summary>Field number for the "OPER_MODE" field.</summary>
    public const int OPERMODEFieldNumber = 6;
    private string oPERMODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OPERMODE {
      get { return oPERMODE_; }
      set {
        oPERMODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LINE_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LINE_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LINEID != other.LINEID) return false;
      if (BCID != other.BCID) return false;
      if (PLCLINKSTAT != other.PLCLINKSTAT) return false;
      if (CIMLINKSTAT != other.CIMLINKSTAT) return false;
      if (CRALARMCNT != other.CRALARMCNT) return false;
      if (OPERMODE != other.OPERMODE) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LINEID.Length != 0) hash ^= LINEID.GetHashCode();
      if (BCID.Length != 0) hash ^= BCID.GetHashCode();
      if (PLCLINKSTAT != 0) hash ^= PLCLINKSTAT.GetHashCode();
      if (CIMLINKSTAT != 0) hash ^= CIMLINKSTAT.GetHashCode();
      if (CRALARMCNT != 0) hash ^= CRALARMCNT.GetHashCode();
      if (OPERMODE.Length != 0) hash ^= OPERMODE.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LINEID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LINEID);
      }
      if (BCID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BCID);
      }
      if (PLCLINKSTAT != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PLCLINKSTAT);
      }
      if (CIMLINKSTAT != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CIMLINKSTAT);
      }
      if (CRALARMCNT != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CRALARMCNT);
      }
      if (OPERMODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(OPERMODE);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LINEID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LINEID);
      }
      if (BCID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BCID);
      }
      if (PLCLINKSTAT != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PLCLINKSTAT);
      }
      if (CIMLINKSTAT != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CIMLINKSTAT);
      }
      if (CRALARMCNT != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CRALARMCNT);
      }
      if (OPERMODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OPERMODE);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LINE_INFO other) {
      if (other == null) {
        return;
      }
      if (other.LINEID.Length != 0) {
        LINEID = other.LINEID;
      }
      if (other.BCID.Length != 0) {
        BCID = other.BCID;
      }
      if (other.PLCLINKSTAT != 0) {
        PLCLINKSTAT = other.PLCLINKSTAT;
      }
      if (other.CIMLINKSTAT != 0) {
        CIMLINKSTAT = other.CIMLINKSTAT;
      }
      if (other.CRALARMCNT != 0) {
        CRALARMCNT = other.CRALARMCNT;
      }
      if (other.OPERMODE.Length != 0) {
        OPERMODE = other.OPERMODE;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LINEID = input.ReadString();
            break;
          }
          case 18: {
            BCID = input.ReadString();
            break;
          }
          case 24: {
            PLCLINKSTAT = input.ReadInt32();
            break;
          }
          case 32: {
            CIMLINKSTAT = input.ReadInt32();
            break;
          }
          case 40: {
            CRALARMCNT = input.ReadInt32();
            break;
          }
          case 50: {
            OPERMODE = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BC_INFO : pb::IMessage<BC_INFO> {
    private static readonly pb::MessageParser<BC_INFO> _parser = new pb::MessageParser<BC_INFO>(() => new BC_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BC_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.McsmessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BC_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BC_INFO(BC_INFO other) : this() {
      bUILDDATE_ = other.bUILDDATE_;
      vERSION_ = other.vERSION_;
      rUNTIME_ = other.rUNTIME_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BC_INFO Clone() {
      return new BC_INFO(this);
    }

    /// <summary>Field number for the "BUILD_DATE" field.</summary>
    public const int BUILDDATEFieldNumber = 1;
    private string bUILDDATE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BUILDDATE {
      get { return bUILDDATE_; }
      set {
        bUILDDATE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VERSION" field.</summary>
    public const int VERSIONFieldNumber = 2;
    private string vERSION_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VERSION {
      get { return vERSION_; }
      set {
        vERSION_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RUN_TIME" field.</summary>
    public const int RUNTIMEFieldNumber = 3;
    private string rUNTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RUNTIME {
      get { return rUNTIME_; }
      set {
        rUNTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BC_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BC_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BUILDDATE != other.BUILDDATE) return false;
      if (VERSION != other.VERSION) return false;
      if (RUNTIME != other.RUNTIME) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BUILDDATE.Length != 0) hash ^= BUILDDATE.GetHashCode();
      if (VERSION.Length != 0) hash ^= VERSION.GetHashCode();
      if (RUNTIME.Length != 0) hash ^= RUNTIME.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BUILDDATE.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BUILDDATE);
      }
      if (VERSION.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VERSION);
      }
      if (RUNTIME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RUNTIME);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BUILDDATE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BUILDDATE);
      }
      if (VERSION.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VERSION);
      }
      if (RUNTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RUNTIME);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BC_INFO other) {
      if (other == null) {
        return;
      }
      if (other.BUILDDATE.Length != 0) {
        BUILDDATE = other.BUILDDATE;
      }
      if (other.VERSION.Length != 0) {
        VERSION = other.VERSION;
      }
      if (other.RUNTIME.Length != 0) {
        RUNTIME = other.RUNTIME;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BUILDDATE = input.ReadString();
            break;
          }
          case 18: {
            VERSION = input.ReadString();
            break;
          }
          case 26: {
            RUNTIME = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EQUIPMENT_INFO : pb::IMessage<EQUIPMENT_INFO> {
    private static readonly pb::MessageParser<EQUIPMENT_INFO> _parser = new pb::MessageParser<EQUIPMENT_INFO>(() => new EQUIPMENT_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EQUIPMENT_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.McsmessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EQUIPMENT_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EQUIPMENT_INFO(EQUIPMENT_INFO other) : this() {
      eQPTID_ = other.eQPTID_;
      eQPTALIVET_ = other.eQPTALIVET_;
      eQPTSTAT_ = other.eQPTSTAT_;
      cIMMODE_ = other.cIMMODE_;
      oPERMODE_ = other.oPERMODE_;
      aLARMHAPPEN_ = other.aLARMHAPPEN_;
      wARNHAPPEN_ = other.wARNHAPPEN_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EQUIPMENT_INFO Clone() {
      return new EQUIPMENT_INFO(this);
    }

    /// <summary>Field number for the "EQPT_ID" field.</summary>
    public const int EQPTIDFieldNumber = 1;
    private string eQPTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQPTID {
      get { return eQPTID_; }
      set {
        eQPTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQPT_ALIVET" field.</summary>
    public const int EQPTALIVETFieldNumber = 2;
    private int eQPTALIVET_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EQPTALIVET {
      get { return eQPTALIVET_; }
      set {
        eQPTALIVET_ = value;
      }
    }

    /// <summary>Field number for the "EQPT_STAT" field.</summary>
    public const int EQPTSTATFieldNumber = 3;
    private int eQPTSTAT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EQPTSTAT {
      get { return eQPTSTAT_; }
      set {
        eQPTSTAT_ = value;
      }
    }

    /// <summary>Field number for the "CIM_MODE" field.</summary>
    public const int CIMMODEFieldNumber = 4;
    private int cIMMODE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CIMMODE {
      get { return cIMMODE_; }
      set {
        cIMMODE_ = value;
      }
    }

    /// <summary>Field number for the "OPER_MODE" field.</summary>
    public const int OPERMODEFieldNumber = 5;
    private int oPERMODE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OPERMODE {
      get { return oPERMODE_; }
      set {
        oPERMODE_ = value;
      }
    }

    /// <summary>Field number for the "ALARM_HAPPEN" field.</summary>
    public const int ALARMHAPPENFieldNumber = 6;
    private int aLARMHAPPEN_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ALARMHAPPEN {
      get { return aLARMHAPPEN_; }
      set {
        aLARMHAPPEN_ = value;
      }
    }

    /// <summary>Field number for the "WARN_HAPPEN" field.</summary>
    public const int WARNHAPPENFieldNumber = 7;
    private int wARNHAPPEN_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WARNHAPPEN {
      get { return wARNHAPPEN_; }
      set {
        wARNHAPPEN_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EQUIPMENT_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EQUIPMENT_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EQPTID != other.EQPTID) return false;
      if (EQPTALIVET != other.EQPTALIVET) return false;
      if (EQPTSTAT != other.EQPTSTAT) return false;
      if (CIMMODE != other.CIMMODE) return false;
      if (OPERMODE != other.OPERMODE) return false;
      if (ALARMHAPPEN != other.ALARMHAPPEN) return false;
      if (WARNHAPPEN != other.WARNHAPPEN) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EQPTID.Length != 0) hash ^= EQPTID.GetHashCode();
      if (EQPTALIVET != 0) hash ^= EQPTALIVET.GetHashCode();
      if (EQPTSTAT != 0) hash ^= EQPTSTAT.GetHashCode();
      if (CIMMODE != 0) hash ^= CIMMODE.GetHashCode();
      if (OPERMODE != 0) hash ^= OPERMODE.GetHashCode();
      if (ALARMHAPPEN != 0) hash ^= ALARMHAPPEN.GetHashCode();
      if (WARNHAPPEN != 0) hash ^= WARNHAPPEN.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EQPTID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EQPTID);
      }
      if (EQPTALIVET != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EQPTALIVET);
      }
      if (EQPTSTAT != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EQPTSTAT);
      }
      if (CIMMODE != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CIMMODE);
      }
      if (OPERMODE != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OPERMODE);
      }
      if (ALARMHAPPEN != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ALARMHAPPEN);
      }
      if (WARNHAPPEN != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(WARNHAPPEN);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EQPTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQPTID);
      }
      if (EQPTALIVET != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EQPTALIVET);
      }
      if (EQPTSTAT != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EQPTSTAT);
      }
      if (CIMMODE != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CIMMODE);
      }
      if (OPERMODE != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OPERMODE);
      }
      if (ALARMHAPPEN != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ALARMHAPPEN);
      }
      if (WARNHAPPEN != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WARNHAPPEN);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EQUIPMENT_INFO other) {
      if (other == null) {
        return;
      }
      if (other.EQPTID.Length != 0) {
        EQPTID = other.EQPTID;
      }
      if (other.EQPTALIVET != 0) {
        EQPTALIVET = other.EQPTALIVET;
      }
      if (other.EQPTSTAT != 0) {
        EQPTSTAT = other.EQPTSTAT;
      }
      if (other.CIMMODE != 0) {
        CIMMODE = other.CIMMODE;
      }
      if (other.OPERMODE != 0) {
        OPERMODE = other.OPERMODE;
      }
      if (other.ALARMHAPPEN != 0) {
        ALARMHAPPEN = other.ALARMHAPPEN;
      }
      if (other.WARNHAPPEN != 0) {
        WARNHAPPEN = other.WARNHAPPEN;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EQPTID = input.ReadString();
            break;
          }
          case 16: {
            EQPTALIVET = input.ReadInt32();
            break;
          }
          case 24: {
            EQPTSTAT = input.ReadInt32();
            break;
          }
          case 32: {
            CIMMODE = input.ReadInt32();
            break;
          }
          case 40: {
            OPERMODE = input.ReadInt32();
            break;
          }
          case 48: {
            ALARMHAPPEN = input.ReadInt32();
            break;
          }
          case 56: {
            WARNHAPPEN = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TIP_INFO : pb::IMessage<TIP_INFO> {
    private static readonly pb::MessageParser<TIP_INFO> _parser = new pb::MessageParser<TIP_INFO>(() => new TIP_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TIP_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.McsmessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TIP_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TIP_INFO(TIP_INFO other) : this() {
      tIPS_ = other.tIPS_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TIP_INFO Clone() {
      return new TIP_INFO(this);
    }

    /// <summary>Field number for the "TIPS" field.</summary>
    public const int TIPSFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.mirle.ibg3k0.sc.ProtocolFormat.TIP_INFO.Types.TIP> _repeated_tIPS_codec
        = pb::FieldCodec.ForMessage(10, global::com.mirle.ibg3k0.sc.ProtocolFormat.TIP_INFO.Types.TIP.Parser);
    private readonly pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.TIP_INFO.Types.TIP> tIPS_ = new pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.TIP_INFO.Types.TIP>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.mirle.ibg3k0.sc.ProtocolFormat.TIP_INFO.Types.TIP> TIPS {
      get { return tIPS_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TIP_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TIP_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tIPS_.Equals(other.tIPS_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tIPS_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tIPS_.WriteTo(output, _repeated_tIPS_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tIPS_.CalculateSize(_repeated_tIPS_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TIP_INFO other) {
      if (other == null) {
        return;
      }
      tIPS_.Add(other.tIPS_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tIPS_.AddEntriesFrom(input, _repeated_tIPS_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TIP_INFO message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class TIP : pb::IMessage<TIP> {
        private static readonly pb::MessageParser<TIP> _parser = new pb::MessageParser<TIP>(() => new TIP());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TIP> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::com.mirle.ibg3k0.sc.ProtocolFormat.TIP_INFO.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TIP() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TIP(TIP other) : this() {
          tIME_ = other.tIME_;
          mSGLEVEL_ = other.mSGLEVEL_;
          mSG_ = other.mSG_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TIP Clone() {
          return new TIP(this);
        }

        /// <summary>Field number for the "TIME" field.</summary>
        public const int TIMEFieldNumber = 1;
        private string tIME_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TIME {
          get { return tIME_; }
          set {
            tIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "MSG_LEVEL" field.</summary>
        public const int MSGLEVELFieldNumber = 2;
        private string mSGLEVEL_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MSGLEVEL {
          get { return mSGLEVEL_; }
          set {
            mSGLEVEL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "MSG" field.</summary>
        public const int MSGFieldNumber = 3;
        private string mSG_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MSG {
          get { return mSG_; }
          set {
            mSG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TIP);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TIP other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TIME != other.TIME) return false;
          if (MSGLEVEL != other.MSGLEVEL) return false;
          if (MSG != other.MSG) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (TIME.Length != 0) hash ^= TIME.GetHashCode();
          if (MSGLEVEL.Length != 0) hash ^= MSGLEVEL.GetHashCode();
          if (MSG.Length != 0) hash ^= MSG.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (TIME.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(TIME);
          }
          if (MSGLEVEL.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(MSGLEVEL);
          }
          if (MSG.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(MSG);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TIME.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TIME);
          }
          if (MSGLEVEL.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MSGLEVEL);
          }
          if (MSG.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MSG);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TIP other) {
          if (other == null) {
            return;
          }
          if (other.TIME.Length != 0) {
            TIME = other.TIME;
          }
          if (other.MSGLEVEL.Length != 0) {
            MSGLEVEL = other.MSGLEVEL;
          }
          if (other.MSG.Length != 0) {
            MSG = other.MSG;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                TIME = input.ReadString();
                break;
              }
              case 18: {
                MSGLEVEL = input.ReadString();
                break;
              }
              case 26: {
                MSG = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
