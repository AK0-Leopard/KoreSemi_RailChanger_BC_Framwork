// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/EAP_K11_H2E.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace com.mirle.ibgAK0.EAP.HostMessage.H2E {

  /// <summary>Holder for reflection information generated from Protos/EAP_K11_H2E.proto</summary>
  public static partial class EAPK11H2EReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/EAP_K11_H2E.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EAPK11H2EReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhQcm90b3MvRUFQX0sxMV9IMkUucHJvdG8isgEKDUZyb21Ib3N0X0hQMDIS",
            "EgoKRlVOQ1RJT05JRBgBIAEoCRIaChJGVU5DVElPTlNFUVVFTkNFTk8YAiAB",
            "KAkSFAoMRlVOQ1RJT05OQU1FGAMgASgJEgwKBEVRSUQYBCABKAkSEwoLUkVQ",
            "T1JUX1RJTUUYBSABKAkSEQoJQlVGRkVSX0lEGAYgASgJEhEKCUJVTkRMRV9J",
            "RBgHIAEoCRISCgpUT19QT1JUX0lEGAggASgJIocBCg5SZXBseUhvc3RfRVAw",
            "MhISCgpGVU5DVElPTklEGAEgASgJEhoKEkZVTkNUSU9OU0VRVUVOQ0VOTxgC",
            "IAEoCRIUCgxGVU5DVElPTk5BTUUYAyABKAkSDAoERVFJRBgEIAEoCRITCgtS",
            "RVBPUlRfVElNRRgFIAEoCRIMCgRDT0RFGAYgASgJIrkBCg1Gcm9tSG9zdF9I",
            "VzMzEhIKCkZVTkNUSU9OSUQYASABKAkSGgoSRlVOQ1RJT05TRVFVRU5DRU5P",
            "GAIgASgJEhQKDEZVTkNUSU9OTkFNRRgDIAEoCRIMCgRFUUlEGAQgASgJEhMK",
            "C1JFUE9SVF9USU1FGAUgASgJEhEKCUJVTkRMRV9JRBgGIAEoCRIZChFUT19C",
            "VUZGRVJfUE9SVF9JRBgHIAEoCRIRCglUUkFZX1RZUEUYCCABKAkihwEKDlJl",
            "cGx5SG9zdF9FVzMzEhIKCkZVTkNUSU9OSUQYASABKAkSGgoSRlVOQ1RJT05T",
            "RVFVRU5DRU5PGAIgASgJEhQKDEZVTkNUSU9OTkFNRRgDIAEoCRIMCgRFUUlE",
            "GAQgASgJEhMKC1JFUE9SVF9USU1FGAUgASgJEgwKBENPREUYBiABKAkisgEK",
            "DUZyb21Ib3N0X0hXMzcSEgoKRlVOQ1RJT05JRBgBIAEoCRIaChJGVU5DVElP",
            "TlNFUVVFTkNFTk8YAiABKAkSFAoMRlVOQ1RJT05OQU1FGAMgASgJEgwKBEVR",
            "SUQYBCABKAkSEwoLUkVQT1JUX1RJTUUYBSABKAkSEQoJQlVORExFX0lEGAYg",
            "ASgJEhAKCExPQ0FUSU9OGAcgASgJEhMKC1BPU0lUSU9OX05PGAggASgJIocB",
            "Cg5SZXBseUhvc3RfRVczNxISCgpGVU5DVElPTklEGAEgASgJEhoKEkZVTkNU",
            "SU9OU0VRVUVOQ0VOTxgCIAEoCRIUCgxGVU5DVElPTk5BTUUYAyABKAkSDAoE",
            "RVFJRBgEIAEoCRITCgtSRVBPUlRfVElNRRgFIAEoCRIMCgRDT0RFGAYgASgJ",
            "IokBCg1Gcm9tSG9zdF9IUzQyEhIKCkZVTkNUSU9OSUQYASABKAkSGgoSRlVO",
            "Q1RJT05TRVFVRU5DRU5PGAIgASgJEhQKDEZVTkNUSU9OTkFNRRgDIAEoCRIM",
            "CgRFUUlEGAQgASgJEhMKC1JFUE9SVF9USU1FGAUgASgJEg8KB01FU1NBR0UY",
            "BiABKAkieQoOUmVwbHlIb3N0X0VTNDISEgoKRlVOQ1RJT05JRBgBIAEoCRIa",
            "ChJGVU5DVElPTlNFUVVFTkNFTk8YAiABKAkSFAoMRlVOQ1RJT05OQU1FGAMg",
            "ASgJEgwKBEVRSUQYBCABKAkSEwoLUkVQT1JUX1RJTUUYBSABKAkieAoNRnJv",
            "bUhvc3RfSFM0NBISCgpGVU5DVElPTklEGAEgASgJEhoKEkZVTkNUSU9OU0VR",
            "VUVOQ0VOTxgCIAEoCRIUCgxGVU5DVElPTk5BTUUYAyABKAkSDAoERVFJRBgE",
            "IAEoCRITCgtSRVBPUlRfVElNRRgFIAEoCSJ5Cg5SZXBseUhvc3RfRVM0NBIS",
            "CgpGVU5DVElPTklEGAEgASgJEhoKEkZVTkNUSU9OU0VRVUVOQ0VOTxgCIAEo",
            "CRIUCgxGVU5DVElPTk5BTUUYAyABKAkSDAoERVFJRBgEIAEoCRITCgtSRVBP",
            "UlRfVElNRRgFIAEoCSKMAQoNRnJvbUhvc3RfSFM0OBISCgpGVU5DVElPTklE",
            "GAEgASgJEhoKEkZVTkNUSU9OU0VRVUVOQ0VOTxgCIAEoCRIUCgxGVU5DVElP",
            "Tk5BTUUYAyABKAkSDAoERVFJRBgEIAEoCRITCgtSRVBPUlRfVElNRRgFIAEo",
            "CRISCgpDSU1fT05fT0ZGGAYgASgJIocBCg5SZXBseUhvc3RfRVM0OBISCgpG",
            "VU5DVElPTklEGAEgASgJEhoKEkZVTkNUSU9OU0VRVUVOQ0VOTxgCIAEoCRIU",
            "CgxGVU5DVElPTk5BTUUYAyABKAkSDAoERVFJRBgEIAEoCRITCgtSRVBPUlRf",
            "VElNRRgFIAEoCRIMCgRDT0RFGAYgASgJIooBCg1Gcm9tSG9zdF9IUzY0EhIK",
            "CkZVTkNUSU9OSUQYASABKAkSGgoSRlVOQ1RJT05TRVFVRU5DRU5PGAIgASgJ",
            "EhQKDEZVTkNUSU9OTkFNRRgDIAEoCRIMCgRFUUlEGAQgASgJEhMKC1JFUE9S",
            "VF9USU1FGAUgASgJEhAKCFJVTl9NT0RFGAYgASgJInkKDlJlcGx5SG9zdF9F",
            "UzY0EhIKCkZVTkNUSU9OSUQYASABKAkSGgoSRlVOQ1RJT05TRVFVRU5DRU5P",
            "GAIgASgJEhQKDEZVTkNUSU9OTkFNRRgDIAEoCRIMCgRFUUlEGAQgASgJEhMK",
            "C1JFUE9SVF9USU1FGAUgASgJIrMBCg1Gcm9tSG9zdF9IQzA1EhIKCkZVTkNU",
            "SU9OSUQYASABKAkSGgoSRlVOQ1RJT05TRVFVRU5DRU5PGAIgASgJEhQKDEZV",
            "TkNUSU9OTkFNRRgDIAEoCRIMCgRFUUlEGAQgASgJEhMKC1JFUE9SVF9USU1F",
            "GAUgASgJEg8KB1BPUlRfSUQYBiABKAkSEAoIQ0FQQUNJVFkYByABKAkSFgoO",
            "T1RIRVJfQ0FQQUNJVFkYCCABKAkihwEKDlJlcGx5SG9zdF9FQzA1EhIKCkZV",
            "TkNUSU9OSUQYASABKAkSGgoSRlVOQ1RJT05TRVFVRU5DRU5PGAIgASgJEhQK",
            "DEZVTkNUSU9OTkFNRRgDIAEoCRIMCgRFUUlEGAQgASgJEhMKC1JFUE9SVF9U",
            "SU1FGAUgASgJEgwKBENPREUYBiABKAkieAoNRnJvbUhvc3RfSEMwNhISCgpG",
            "VU5DVElPTklEGAEgASgJEhoKEkZVTkNUSU9OU0VRVUVOQ0VOTxgCIAEoCRIU",
            "CgxGVU5DVElPTk5BTUUYAyABKAkSDAoERVFJRBgEIAEoCRITCgtSRVBPUlRf",
            "VElNRRgFIAEoCSKHAQoOUmVwbHlIb3N0X0VDMDYSEgoKRlVOQ1RJT05JRBgB",
            "IAEoCRIaChJGVU5DVElPTlNFUVVFTkNFTk8YAiABKAkSFAoMRlVOQ1RJT05O",
            "QU1FGAMgASgJEgwKBEVRSUQYBCABKAkSEwoLUkVQT1JUX1RJTUUYBSABKAkS",
            "DAoEQ09ERRgGIAEoCTKpBAoLRUFQX0sxMV9IMkUSOgoVRnJvbUhvc3RfSFAw",
            "Ml9Db21tYW5kEg4uRnJvbUhvc3RfSFAwMhoPLlJlcGx5SG9zdF9FUDAyIgAS",
            "OgoVRnJvbUhvc3RfSFczM19Db21tYW5kEg4uRnJvbUhvc3RfSFczMxoPLlJl",
            "cGx5SG9zdF9FVzMzIgASOgoVRnJvbUhvc3RfSFczN19Db21tYW5kEg4uRnJv",
            "bUhvc3RfSFczNxoPLlJlcGx5SG9zdF9FVzM3IgASOgoVRnJvbUhvc3RfSFM0",
            "Ml9Db21tYW5kEg4uRnJvbUhvc3RfSFM0MhoPLlJlcGx5SG9zdF9FUzQyIgAS",
            "OgoVRnJvbUhvc3RfSFM0NF9Db21tYW5kEg4uRnJvbUhvc3RfSFM0NBoPLlJl",
            "cGx5SG9zdF9FUzQ0IgASOgoVRnJvbUhvc3RfSFM0OF9Db21tYW5kEg4uRnJv",
            "bUhvc3RfSFM0OBoPLlJlcGx5SG9zdF9FUzQ4IgASOgoVRnJvbUhvc3RfSFM2",
            "NF9Db21tYW5kEg4uRnJvbUhvc3RfSFM2NBoPLlJlcGx5SG9zdF9FUzY0IgAS",
            "OgoVRnJvbUhvc3RfSEMwNV9Db21tYW5kEg4uRnJvbUhvc3RfSEMwNRoPLlJl",
            "cGx5SG9zdF9FQzA1IgASOgoVRnJvbUhvc3RfSEMwNl9Db21tYW5kEg4uRnJv",
            "bUhvc3RfSEMwNhoPLlJlcGx5SG9zdF9FQzA2IgBCJ6oCJGNvbS5taXJsZS5p",
            "YmdBSzAuRUFQLkhvc3RNZXNzYWdlLkgyRWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HP02), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HP02.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "BUFFERID", "BUNDLEID", "TOPORTID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_EP02), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_EP02.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "CODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HW33), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HW33.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "BUNDLEID", "TOBUFFERPORTID", "TRAYTYPE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_EW33), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_EW33.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "CODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HW37), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HW37.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "BUNDLEID", "LOCATION", "POSITIONNO" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_EW37), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_EW37.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "CODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HS42), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HS42.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "MESSAGE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_ES42), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_ES42.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HS44), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HS44.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_ES44), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_ES44.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HS48), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HS48.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "CIMONOFF" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_ES48), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_ES48.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "CODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HS64), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HS64.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "RUNMODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_ES64), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_ES64.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HC05), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HC05.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "PORTID", "CAPACITY", "OTHERCAPACITY" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_EC05), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_EC05.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "CODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HC06), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HC06.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_EC06), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_EC06.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "CODE" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///From Host (MCS send to EAP)
  /// </summary>
  public sealed partial class FromHost_HP02 : pb::IMessage<FromHost_HP02>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FromHost_HP02> _parser = new pb::MessageParser<FromHost_HP02>(() => new FromHost_HP02());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FromHost_HP02> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.EAPK11H2EReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HP02() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HP02(FromHost_HP02 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      bUFFERID_ = other.bUFFERID_;
      bUNDLEID_ = other.bUNDLEID_;
      tOPORTID_ = other.tOPORTID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HP02 Clone() {
      return new FromHost_HP02(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BUFFER_ID" field.</summary>
    public const int BUFFERIDFieldNumber = 6;
    private string bUFFERID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BUFFERID {
      get { return bUFFERID_; }
      set {
        bUFFERID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BUNDLE_ID" field.</summary>
    public const int BUNDLEIDFieldNumber = 7;
    private string bUNDLEID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BUNDLEID {
      get { return bUNDLEID_; }
      set {
        bUNDLEID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TO_PORT_ID" field.</summary>
    public const int TOPORTIDFieldNumber = 8;
    private string tOPORTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TOPORTID {
      get { return tOPORTID_; }
      set {
        tOPORTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FromHost_HP02);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FromHost_HP02 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (BUFFERID != other.BUFFERID) return false;
      if (BUNDLEID != other.BUNDLEID) return false;
      if (TOPORTID != other.TOPORTID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (BUFFERID.Length != 0) hash ^= BUFFERID.GetHashCode();
      if (BUNDLEID.Length != 0) hash ^= BUNDLEID.GetHashCode();
      if (TOPORTID.Length != 0) hash ^= TOPORTID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (BUFFERID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BUFFERID);
      }
      if (BUNDLEID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BUNDLEID);
      }
      if (TOPORTID.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(TOPORTID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (BUFFERID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BUFFERID);
      }
      if (BUNDLEID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BUNDLEID);
      }
      if (TOPORTID.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(TOPORTID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (BUFFERID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BUFFERID);
      }
      if (BUNDLEID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BUNDLEID);
      }
      if (TOPORTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TOPORTID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FromHost_HP02 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.BUFFERID.Length != 0) {
        BUFFERID = other.BUFFERID;
      }
      if (other.BUNDLEID.Length != 0) {
        BUNDLEID = other.BUNDLEID;
      }
      if (other.TOPORTID.Length != 0) {
        TOPORTID = other.TOPORTID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            BUFFERID = input.ReadString();
            break;
          }
          case 58: {
            BUNDLEID = input.ReadString();
            break;
          }
          case 66: {
            TOPORTID = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            BUFFERID = input.ReadString();
            break;
          }
          case 58: {
            BUNDLEID = input.ReadString();
            break;
          }
          case 66: {
            TOPORTID = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReplyHost_EP02 : pb::IMessage<ReplyHost_EP02>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReplyHost_EP02> _parser = new pb::MessageParser<ReplyHost_EP02>(() => new ReplyHost_EP02());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplyHost_EP02> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.EAPK11H2EReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EP02() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EP02(ReplyHost_EP02 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      cODE_ = other.cODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EP02 Clone() {
      return new ReplyHost_EP02(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CODE" field.</summary>
    public const int CODEFieldNumber = 6;
    private string cODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CODE {
      get { return cODE_; }
      set {
        cODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplyHost_EP02);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplyHost_EP02 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (CODE != other.CODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (CODE.Length != 0) hash ^= CODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (CODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplyHost_EP02 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.CODE.Length != 0) {
        CODE = other.CODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FromHost_HW33 : pb::IMessage<FromHost_HW33>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FromHost_HW33> _parser = new pb::MessageParser<FromHost_HW33>(() => new FromHost_HW33());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FromHost_HW33> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.EAPK11H2EReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HW33() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HW33(FromHost_HW33 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      bUNDLEID_ = other.bUNDLEID_;
      tOBUFFERPORTID_ = other.tOBUFFERPORTID_;
      tRAYTYPE_ = other.tRAYTYPE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HW33 Clone() {
      return new FromHost_HW33(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BUNDLE_ID" field.</summary>
    public const int BUNDLEIDFieldNumber = 6;
    private string bUNDLEID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BUNDLEID {
      get { return bUNDLEID_; }
      set {
        bUNDLEID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TO_BUFFER_PORT_ID" field.</summary>
    public const int TOBUFFERPORTIDFieldNumber = 7;
    private string tOBUFFERPORTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TOBUFFERPORTID {
      get { return tOBUFFERPORTID_; }
      set {
        tOBUFFERPORTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TRAY_TYPE" field.</summary>
    public const int TRAYTYPEFieldNumber = 8;
    private string tRAYTYPE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TRAYTYPE {
      get { return tRAYTYPE_; }
      set {
        tRAYTYPE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FromHost_HW33);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FromHost_HW33 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (BUNDLEID != other.BUNDLEID) return false;
      if (TOBUFFERPORTID != other.TOBUFFERPORTID) return false;
      if (TRAYTYPE != other.TRAYTYPE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (BUNDLEID.Length != 0) hash ^= BUNDLEID.GetHashCode();
      if (TOBUFFERPORTID.Length != 0) hash ^= TOBUFFERPORTID.GetHashCode();
      if (TRAYTYPE.Length != 0) hash ^= TRAYTYPE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (BUNDLEID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BUNDLEID);
      }
      if (TOBUFFERPORTID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(TOBUFFERPORTID);
      }
      if (TRAYTYPE.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(TRAYTYPE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (BUNDLEID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BUNDLEID);
      }
      if (TOBUFFERPORTID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(TOBUFFERPORTID);
      }
      if (TRAYTYPE.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(TRAYTYPE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (BUNDLEID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BUNDLEID);
      }
      if (TOBUFFERPORTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TOBUFFERPORTID);
      }
      if (TRAYTYPE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TRAYTYPE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FromHost_HW33 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.BUNDLEID.Length != 0) {
        BUNDLEID = other.BUNDLEID;
      }
      if (other.TOBUFFERPORTID.Length != 0) {
        TOBUFFERPORTID = other.TOBUFFERPORTID;
      }
      if (other.TRAYTYPE.Length != 0) {
        TRAYTYPE = other.TRAYTYPE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            BUNDLEID = input.ReadString();
            break;
          }
          case 58: {
            TOBUFFERPORTID = input.ReadString();
            break;
          }
          case 66: {
            TRAYTYPE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            BUNDLEID = input.ReadString();
            break;
          }
          case 58: {
            TOBUFFERPORTID = input.ReadString();
            break;
          }
          case 66: {
            TRAYTYPE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReplyHost_EW33 : pb::IMessage<ReplyHost_EW33>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReplyHost_EW33> _parser = new pb::MessageParser<ReplyHost_EW33>(() => new ReplyHost_EW33());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplyHost_EW33> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.EAPK11H2EReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EW33() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EW33(ReplyHost_EW33 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      cODE_ = other.cODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EW33 Clone() {
      return new ReplyHost_EW33(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CODE" field.</summary>
    public const int CODEFieldNumber = 6;
    private string cODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CODE {
      get { return cODE_; }
      set {
        cODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplyHost_EW33);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplyHost_EW33 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (CODE != other.CODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (CODE.Length != 0) hash ^= CODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (CODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplyHost_EW33 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.CODE.Length != 0) {
        CODE = other.CODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FromHost_HW37 : pb::IMessage<FromHost_HW37>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FromHost_HW37> _parser = new pb::MessageParser<FromHost_HW37>(() => new FromHost_HW37());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FromHost_HW37> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.EAPK11H2EReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HW37() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HW37(FromHost_HW37 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      bUNDLEID_ = other.bUNDLEID_;
      lOCATION_ = other.lOCATION_;
      pOSITIONNO_ = other.pOSITIONNO_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HW37 Clone() {
      return new FromHost_HW37(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BUNDLE_ID" field.</summary>
    public const int BUNDLEIDFieldNumber = 6;
    private string bUNDLEID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BUNDLEID {
      get { return bUNDLEID_; }
      set {
        bUNDLEID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LOCATION" field.</summary>
    public const int LOCATIONFieldNumber = 7;
    private string lOCATION_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LOCATION {
      get { return lOCATION_; }
      set {
        lOCATION_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "POSITION_NO" field.</summary>
    public const int POSITIONNOFieldNumber = 8;
    private string pOSITIONNO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string POSITIONNO {
      get { return pOSITIONNO_; }
      set {
        pOSITIONNO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FromHost_HW37);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FromHost_HW37 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (BUNDLEID != other.BUNDLEID) return false;
      if (LOCATION != other.LOCATION) return false;
      if (POSITIONNO != other.POSITIONNO) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (BUNDLEID.Length != 0) hash ^= BUNDLEID.GetHashCode();
      if (LOCATION.Length != 0) hash ^= LOCATION.GetHashCode();
      if (POSITIONNO.Length != 0) hash ^= POSITIONNO.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (BUNDLEID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BUNDLEID);
      }
      if (LOCATION.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LOCATION);
      }
      if (POSITIONNO.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(POSITIONNO);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (BUNDLEID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BUNDLEID);
      }
      if (LOCATION.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LOCATION);
      }
      if (POSITIONNO.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(POSITIONNO);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (BUNDLEID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BUNDLEID);
      }
      if (LOCATION.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LOCATION);
      }
      if (POSITIONNO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(POSITIONNO);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FromHost_HW37 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.BUNDLEID.Length != 0) {
        BUNDLEID = other.BUNDLEID;
      }
      if (other.LOCATION.Length != 0) {
        LOCATION = other.LOCATION;
      }
      if (other.POSITIONNO.Length != 0) {
        POSITIONNO = other.POSITIONNO;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            BUNDLEID = input.ReadString();
            break;
          }
          case 58: {
            LOCATION = input.ReadString();
            break;
          }
          case 66: {
            POSITIONNO = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            BUNDLEID = input.ReadString();
            break;
          }
          case 58: {
            LOCATION = input.ReadString();
            break;
          }
          case 66: {
            POSITIONNO = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReplyHost_EW37 : pb::IMessage<ReplyHost_EW37>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReplyHost_EW37> _parser = new pb::MessageParser<ReplyHost_EW37>(() => new ReplyHost_EW37());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplyHost_EW37> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.EAPK11H2EReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EW37() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EW37(ReplyHost_EW37 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      cODE_ = other.cODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EW37 Clone() {
      return new ReplyHost_EW37(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CODE" field.</summary>
    public const int CODEFieldNumber = 6;
    private string cODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CODE {
      get { return cODE_; }
      set {
        cODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplyHost_EW37);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplyHost_EW37 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (CODE != other.CODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (CODE.Length != 0) hash ^= CODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (CODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplyHost_EW37 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.CODE.Length != 0) {
        CODE = other.CODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FromHost_HS42 : pb::IMessage<FromHost_HS42>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FromHost_HS42> _parser = new pb::MessageParser<FromHost_HS42>(() => new FromHost_HS42());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FromHost_HS42> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.EAPK11H2EReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HS42() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HS42(FromHost_HS42 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      mESSAGE_ = other.mESSAGE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HS42 Clone() {
      return new FromHost_HS42(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MESSAGE" field.</summary>
    public const int MESSAGEFieldNumber = 6;
    private string mESSAGE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MESSAGE {
      get { return mESSAGE_; }
      set {
        mESSAGE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FromHost_HS42);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FromHost_HS42 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (MESSAGE != other.MESSAGE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (MESSAGE.Length != 0) hash ^= MESSAGE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (MESSAGE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(MESSAGE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (MESSAGE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(MESSAGE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (MESSAGE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MESSAGE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FromHost_HS42 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.MESSAGE.Length != 0) {
        MESSAGE = other.MESSAGE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            MESSAGE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            MESSAGE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReplyHost_ES42 : pb::IMessage<ReplyHost_ES42>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReplyHost_ES42> _parser = new pb::MessageParser<ReplyHost_ES42>(() => new ReplyHost_ES42());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplyHost_ES42> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.EAPK11H2EReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_ES42() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_ES42(ReplyHost_ES42 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_ES42 Clone() {
      return new ReplyHost_ES42(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplyHost_ES42);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplyHost_ES42 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplyHost_ES42 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FromHost_HS44 : pb::IMessage<FromHost_HS44>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FromHost_HS44> _parser = new pb::MessageParser<FromHost_HS44>(() => new FromHost_HS44());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FromHost_HS44> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.EAPK11H2EReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HS44() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HS44(FromHost_HS44 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HS44 Clone() {
      return new FromHost_HS44(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FromHost_HS44);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FromHost_HS44 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FromHost_HS44 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReplyHost_ES44 : pb::IMessage<ReplyHost_ES44>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReplyHost_ES44> _parser = new pb::MessageParser<ReplyHost_ES44>(() => new ReplyHost_ES44());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplyHost_ES44> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.EAPK11H2EReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_ES44() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_ES44(ReplyHost_ES44 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_ES44 Clone() {
      return new ReplyHost_ES44(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplyHost_ES44);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplyHost_ES44 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplyHost_ES44 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FromHost_HS48 : pb::IMessage<FromHost_HS48>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FromHost_HS48> _parser = new pb::MessageParser<FromHost_HS48>(() => new FromHost_HS48());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FromHost_HS48> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.EAPK11H2EReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HS48() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HS48(FromHost_HS48 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      cIMONOFF_ = other.cIMONOFF_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HS48 Clone() {
      return new FromHost_HS48(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CIM_ON_OFF" field.</summary>
    public const int CIMONOFFFieldNumber = 6;
    private string cIMONOFF_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CIMONOFF {
      get { return cIMONOFF_; }
      set {
        cIMONOFF_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FromHost_HS48);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FromHost_HS48 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (CIMONOFF != other.CIMONOFF) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (CIMONOFF.Length != 0) hash ^= CIMONOFF.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CIMONOFF.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CIMONOFF);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CIMONOFF.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CIMONOFF);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (CIMONOFF.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CIMONOFF);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FromHost_HS48 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.CIMONOFF.Length != 0) {
        CIMONOFF = other.CIMONOFF;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CIMONOFF = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CIMONOFF = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReplyHost_ES48 : pb::IMessage<ReplyHost_ES48>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReplyHost_ES48> _parser = new pb::MessageParser<ReplyHost_ES48>(() => new ReplyHost_ES48());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplyHost_ES48> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.EAPK11H2EReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_ES48() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_ES48(ReplyHost_ES48 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      cODE_ = other.cODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_ES48 Clone() {
      return new ReplyHost_ES48(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CODE" field.</summary>
    public const int CODEFieldNumber = 6;
    private string cODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CODE {
      get { return cODE_; }
      set {
        cODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplyHost_ES48);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplyHost_ES48 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (CODE != other.CODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (CODE.Length != 0) hash ^= CODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (CODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplyHost_ES48 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.CODE.Length != 0) {
        CODE = other.CODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FromHost_HS64 : pb::IMessage<FromHost_HS64>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FromHost_HS64> _parser = new pb::MessageParser<FromHost_HS64>(() => new FromHost_HS64());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FromHost_HS64> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.EAPK11H2EReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HS64() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HS64(FromHost_HS64 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      rUNMODE_ = other.rUNMODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HS64 Clone() {
      return new FromHost_HS64(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RUN_MODE" field.</summary>
    public const int RUNMODEFieldNumber = 6;
    private string rUNMODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RUNMODE {
      get { return rUNMODE_; }
      set {
        rUNMODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FromHost_HS64);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FromHost_HS64 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (RUNMODE != other.RUNMODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (RUNMODE.Length != 0) hash ^= RUNMODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (RUNMODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RUNMODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (RUNMODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RUNMODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (RUNMODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RUNMODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FromHost_HS64 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.RUNMODE.Length != 0) {
        RUNMODE = other.RUNMODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            RUNMODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            RUNMODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReplyHost_ES64 : pb::IMessage<ReplyHost_ES64>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReplyHost_ES64> _parser = new pb::MessageParser<ReplyHost_ES64>(() => new ReplyHost_ES64());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplyHost_ES64> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.EAPK11H2EReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_ES64() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_ES64(ReplyHost_ES64 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_ES64 Clone() {
      return new ReplyHost_ES64(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplyHost_ES64);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplyHost_ES64 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplyHost_ES64 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FromHost_HC05 : pb::IMessage<FromHost_HC05>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FromHost_HC05> _parser = new pb::MessageParser<FromHost_HC05>(() => new FromHost_HC05());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FromHost_HC05> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.EAPK11H2EReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HC05() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HC05(FromHost_HC05 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      pORTID_ = other.pORTID_;
      cAPACITY_ = other.cAPACITY_;
      oTHERCAPACITY_ = other.oTHERCAPACITY_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HC05 Clone() {
      return new FromHost_HC05(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PORT_ID" field.</summary>
    public const int PORTIDFieldNumber = 6;
    private string pORTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PORTID {
      get { return pORTID_; }
      set {
        pORTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CAPACITY" field.</summary>
    public const int CAPACITYFieldNumber = 7;
    private string cAPACITY_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CAPACITY {
      get { return cAPACITY_; }
      set {
        cAPACITY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OTHER_CAPACITY" field.</summary>
    public const int OTHERCAPACITYFieldNumber = 8;
    private string oTHERCAPACITY_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OTHERCAPACITY {
      get { return oTHERCAPACITY_; }
      set {
        oTHERCAPACITY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FromHost_HC05);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FromHost_HC05 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (PORTID != other.PORTID) return false;
      if (CAPACITY != other.CAPACITY) return false;
      if (OTHERCAPACITY != other.OTHERCAPACITY) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (PORTID.Length != 0) hash ^= PORTID.GetHashCode();
      if (CAPACITY.Length != 0) hash ^= CAPACITY.GetHashCode();
      if (OTHERCAPACITY.Length != 0) hash ^= OTHERCAPACITY.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (PORTID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PORTID);
      }
      if (CAPACITY.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CAPACITY);
      }
      if (OTHERCAPACITY.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(OTHERCAPACITY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (PORTID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PORTID);
      }
      if (CAPACITY.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CAPACITY);
      }
      if (OTHERCAPACITY.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(OTHERCAPACITY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (PORTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PORTID);
      }
      if (CAPACITY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CAPACITY);
      }
      if (OTHERCAPACITY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OTHERCAPACITY);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FromHost_HC05 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.PORTID.Length != 0) {
        PORTID = other.PORTID;
      }
      if (other.CAPACITY.Length != 0) {
        CAPACITY = other.CAPACITY;
      }
      if (other.OTHERCAPACITY.Length != 0) {
        OTHERCAPACITY = other.OTHERCAPACITY;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            PORTID = input.ReadString();
            break;
          }
          case 58: {
            CAPACITY = input.ReadString();
            break;
          }
          case 66: {
            OTHERCAPACITY = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            PORTID = input.ReadString();
            break;
          }
          case 58: {
            CAPACITY = input.ReadString();
            break;
          }
          case 66: {
            OTHERCAPACITY = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReplyHost_EC05 : pb::IMessage<ReplyHost_EC05>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReplyHost_EC05> _parser = new pb::MessageParser<ReplyHost_EC05>(() => new ReplyHost_EC05());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplyHost_EC05> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.EAPK11H2EReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EC05() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EC05(ReplyHost_EC05 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      cODE_ = other.cODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EC05 Clone() {
      return new ReplyHost_EC05(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CODE" field.</summary>
    public const int CODEFieldNumber = 6;
    private string cODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CODE {
      get { return cODE_; }
      set {
        cODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplyHost_EC05);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplyHost_EC05 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (CODE != other.CODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (CODE.Length != 0) hash ^= CODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (CODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplyHost_EC05 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.CODE.Length != 0) {
        CODE = other.CODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FromHost_HC06 : pb::IMessage<FromHost_HC06>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FromHost_HC06> _parser = new pb::MessageParser<FromHost_HC06>(() => new FromHost_HC06());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FromHost_HC06> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.EAPK11H2EReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HC06() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HC06(FromHost_HC06 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HC06 Clone() {
      return new FromHost_HC06(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FromHost_HC06);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FromHost_HC06 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FromHost_HC06 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReplyHost_EC06 : pb::IMessage<ReplyHost_EC06>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReplyHost_EC06> _parser = new pb::MessageParser<ReplyHost_EC06>(() => new ReplyHost_EC06());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplyHost_EC06> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.EAPK11H2EReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EC06() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EC06(ReplyHost_EC06 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      cODE_ = other.cODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EC06 Clone() {
      return new ReplyHost_EC06(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CODE" field.</summary>
    public const int CODEFieldNumber = 6;
    private string cODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CODE {
      get { return cODE_; }
      set {
        cODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplyHost_EC06);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplyHost_EC06 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (CODE != other.CODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (CODE.Length != 0) hash ^= CODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (CODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplyHost_EC06 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.CODE.Length != 0) {
        CODE = other.CODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
