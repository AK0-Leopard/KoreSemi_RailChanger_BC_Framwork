// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/EAP_K11_E2H.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace com.mirle.ibgAK0.EAP.HostMessage.E2H {

  /// <summary>Holder for reflection information generated from Protos/EAP_K11_E2H.proto</summary>
  public static partial class EAPK11E2HReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/EAP_K11_E2H.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EAPK11E2HReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhQcm90b3MvRUFQX0sxMV9FMkgucHJvdG8ijAEKE1JlcGx5X0Zyb21Ib3N0",
            "X0hQMTESEgoKRlVOQ1RJT05JRBgBIAEoCRIaChJGVU5DVElPTlNFUVVFTkNF",
            "Tk8YAiABKAkSFAoMRlVOQ1RJT05OQU1FGAMgASgJEgwKBEVRSUQYBCABKAkS",
            "EwoLUkVQT1JUX1RJTUUYBSABKAkSDAoEQ09ERRgGIAEoCSLBAQoNU2VuZEhv",
            "c3RfRVAxMRISCgpGVU5DVElPTklEGAEgASgJEhoKEkZVTkNUSU9OU0VRVUVO",
            "Q0VOTxgCIAEoCRIUCgxGVU5DVElPTk5BTUUYAyABKAkSDAoERVFJRBgEIAEo",
            "CRITCgtSRVBPUlRfVElNRRgFIAEoCRIRCglCVUZGRVJfSUQYBiABKAkSEQoJ",
            "QlVORExFX0lEGAcgASgJEg4KBlNUQVRVUxgIIAEoCRIRCglUUkFZX1RZUEUY",
            "CSABKAkijAEKE1JlcGx5X0Zyb21Ib3N0X0hXMzQSEgoKRlVOQ1RJT05JRBgB",
            "IAEoCRIaChJGVU5DVElPTlNFUVVFTkNFTk8YAiABKAkSFAoMRlVOQ1RJT05O",
            "QU1FGAMgASgJEgwKBEVRSUQYBCABKAkSEwoLUkVQT1JUX1RJTUUYBSABKAkS",
            "DAoEQ09ERRgGIAEoCSKkAQoNU2VuZEhvc3RfRVczNBISCgpGVU5DVElPTklE",
            "GAEgASgJEhoKEkZVTkNUSU9OU0VRVUVOQ0VOTxgCIAEoCRIUCgxGVU5DVElP",
            "Tk5BTUUYAyABKAkSDAoERVFJRBgEIAEoCRITCgtSRVBPUlRfVElNRRgFIAEo",
            "CRIRCglCVU5ETEVfSUQYBiABKAkSFwoPREVMRVRFX0xPQ0FUSU9OGAcgASgJ",
            "IowBChNSZXBseV9Gcm9tSG9zdF9IVzM1EhIKCkZVTkNUSU9OSUQYASABKAkS",
            "GgoSRlVOQ1RJT05TRVFVRU5DRU5PGAIgASgJEhQKDEZVTkNUSU9OTkFNRRgD",
            "IAEoCRIMCgRFUUlEGAQgASgJEhMKC1JFUE9SVF9USU1FGAUgASgJEgwKBENP",
            "REUYBiABKAkitAEKDVNlbmRIb3N0X0VXMzUSEgoKRlVOQ1RJT05JRBgBIAEo",
            "CRIaChJGVU5DVElPTlNFUVVFTkNFTk8YAiABKAkSFAoMRlVOQ1RJT05OQU1F",
            "GAMgASgJEgwKBEVRSUQYBCABKAkSEwoLUkVQT1JUX1RJTUUYBSABKAkSFQoN",
            "VFJBTlNGRVJfVFlQRRgGIAEoCRIRCglCVU5ETEVfSUQYByABKAkSEAoITE9D",
            "QVRJT04YCCABKAkijAEKE1JlcGx5X0Zyb21Ib3N0X0hXMzYSEgoKRlVOQ1RJ",
            "T05JRBgBIAEoCRIaChJGVU5DVElPTlNFUVVFTkNFTk8YAiABKAkSFAoMRlVO",
            "Q1RJT05OQU1FGAMgASgJEgwKBEVRSUQYBCABKAkSEwoLUkVQT1JUX1RJTUUY",
            "BSABKAkSDAoEQ09ERRgGIAEoCSLSAQoNU2VuZEhvc3RfRVczNhISCgpGVU5D",
            "VElPTklEGAEgASgJEhoKEkZVTkNUSU9OU0VRVUVOQ0VOTxgCIAEoCRIUCgxG",
            "VU5DVElPTk5BTUUYAyABKAkSDAoERVFJRBgEIAEoCRITCgtSRVBPUlRfVElN",
            "RRgFIAEoCRIQCghMT0NBVElPThgGIAEoCRIRCglCVU5ETEVfSUQYByABKAkS",
            "EgoKRVZFTlRfVFlQRRgIIAEoCRIRCglUUkFZX1RZUEUYCSABKAkSDAoEQ09E",
            "RRgKIAEoCSJ+ChNSZXBseV9Gcm9tSG9zdF9IUzQ1EhIKCkZVTkNUSU9OSUQY",
            "ASABKAkSGgoSRlVOQ1RJT05TRVFVRU5DRU5PGAIgASgJEhQKDEZVTkNUSU9O",
            "TkFNRRgDIAEoCRIMCgRFUUlEGAQgASgJEhMKC1JFUE9SVF9USU1FGAUgASgJ",
            "IngKDVNlbmRIb3N0X0VTNDUSEgoKRlVOQ1RJT05JRBgBIAEoCRIaChJGVU5D",
            "VElPTlNFUVVFTkNFTk8YAiABKAkSFAoMRlVOQ1RJT05OQU1FGAMgASgJEgwK",
            "BEVRSUQYBCABKAkSEwoLUkVQT1JUX1RJTUUYBSABKAkifgoTUmVwbHlfRnJv",
            "bUhvc3RfSFM0NhISCgpGVU5DVElPTklEGAEgASgJEhoKEkZVTkNUSU9OU0VR",
            "VUVOQ0VOTxgCIAEoCRIUCgxGVU5DVElPTk5BTUUYAyABKAkSDAoERVFJRBgE",
            "IAEoCRITCgtSRVBPUlRfVElNRRgFIAEoCSLqAQoNU2VuZEhvc3RfRVM0NhIS",
            "CgpGVU5DVElPTklEGAEgASgJEhoKEkZVTkNUSU9OU0VRVUVOQ0VOTxgCIAEo",
            "CRIUCgxGVU5DVElPTk5BTUUYAyABKAkSDAoERVFJRBgEIAEoCRITCgtSRVBP",
            "UlRfVElNRRgFIAEoCRIYChBFUVVJUE1FTlRfU1RBVFVTGAYgASgJEhAKCENJ",
            "TV9NT0RFGAcgASgJEhAKCFJVTl9NT0RFGAggASgJEhYKDk9QRVJBVElPTl9N",
            "T0RFGAkgASgJEhoKEkFMQVJNV0FSTklOR0hBUFBFThgKIAEoCSKMAQoTUmVw",
            "bHlfRnJvbUhvc3RfSFM0ORISCgpGVU5DVElPTklEGAEgASgJEhoKEkZVTkNU",
            "SU9OU0VRVUVOQ0VOTxgCIAEoCRIUCgxGVU5DVElPTk5BTUUYAyABKAkSDAoE",
            "RVFJRBgEIAEoCRITCgtSRVBPUlRfVElNRRgFIAEoCRIMCgRDT0RFGAYgASgJ",
            "IrcBCg1TZW5kSG9zdF9FUzQ5EhIKCkZVTkNUSU9OSUQYASABKAkSGgoSRlVO",
            "Q1RJT05TRVFVRU5DRU5PGAIgASgJEhQKDEZVTkNUSU9OTkFNRRgDIAEoCRIM",
            "CgRFUUlEGAQgASgJEhMKC1JFUE9SVF9USU1FGAUgASgJEhQKDEFMQVJNX1NU",
            "QVRVUxgGIAEoCRITCgtBTEFSTV9MRVZFTBgHIAEoCRISCgpBTEFSTV9DT0RF",
            "GAggASgJIowBChNSZXBseV9Gcm9tSG9zdF9IUzU0EhIKCkZVTkNUSU9OSUQY",
            "ASABKAkSGgoSRlVOQ1RJT05TRVFVRU5DRU5PGAIgASgJEhQKDEZVTkNUSU9O",
            "TkFNRRgDIAEoCRIMCgRFUUlEGAQgASgJEhMKC1JFUE9SVF9USU1FGAUgASgJ",
            "EgwKBENPREUYBiABKAki5wEKDVNlbmRIb3N0X0VTNTQSEgoKRlVOQ1RJT05J",
            "RBgBIAEoCRIaChJGVU5DVElPTlNFUVVFTkNFTk8YAiABKAkSFAoMRlVOQ1RJ",
            "T05OQU1FGAMgASgJEgwKBEVRSUQYBCABKAkSEwoLUkVQT1JUX1RJTUUYBSAB",
            "KAkSFQoNQkNSX0J1bmRsZV9JRBgGIAEoCRIZChFWaXJ0dWFsX0J1bmRsZV9J",
            "RBgHIAEoCRIYChBNQVRFUklBTF9QUkVTRU5UGAggASgJEiEKGUVYRUNVVElP",
            "Tl9DTURfU0VRVUVOQ0VfTk8YCSABKAkylQQKC0VBUF9LMTFfRTJIEj8KFVNl",
            "bmRIb3N0X0VQMTFfQ29tbWFuZBIOLlNlbmRIb3N0X0VQMTEaFC5SZXBseV9G",
            "cm9tSG9zdF9IUDExIgASPwoVU2VuZEhvc3RfRVczNF9Db21tYW5kEg4uU2Vu",
            "ZEhvc3RfRVczNBoULlJlcGx5X0Zyb21Ib3N0X0hXMzQiABI/ChVTZW5kSG9z",
            "dF9FVzM1X0NvbW1hbmQSDi5TZW5kSG9zdF9FVzM1GhQuUmVwbHlfRnJvbUhv",
            "c3RfSFczNSIAEj8KFVNlbmRIb3N0X0VXMzZfQ29tbWFuZBIOLlNlbmRIb3N0",
            "X0VXMzYaFC5SZXBseV9Gcm9tSG9zdF9IVzM2IgASPwoVU2VuZEhvc3RfRVM0",
            "NV9Db21tYW5kEg4uU2VuZEhvc3RfRVM0NRoULlJlcGx5X0Zyb21Ib3N0X0hT",
            "NDUiABI/ChVTZW5kSG9zdF9FUzQ2X0NvbW1hbmQSDi5TZW5kSG9zdF9FUzQ2",
            "GhQuUmVwbHlfRnJvbUhvc3RfSFM0NiIAEj8KFVNlbmRIb3N0X0VTNDlfQ29t",
            "bWFuZBIOLlNlbmRIb3N0X0VTNDkaFC5SZXBseV9Gcm9tSG9zdF9IUzQ5IgAS",
            "PwoVU2VuZEhvc3RfRVM1NF9Db21tYW5kEg4uU2VuZEhvc3RfRVM1NBoULlJl",
            "cGx5X0Zyb21Ib3N0X0hTNTQiAEInqgIkY29tLm1pcmxlLmliZ0FLMC5FQVAu",
            "SG9zdE1lc3NhZ2UuRTJIYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.E2H.Reply_FromHost_HP11), global::com.mirle.ibgAK0.EAP.HostMessage.E2H.Reply_FromHost_HP11.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "CODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.E2H.SendHost_EP11), global::com.mirle.ibgAK0.EAP.HostMessage.E2H.SendHost_EP11.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "BUFFERID", "BUNDLEID", "STATUS", "TRAYTYPE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.E2H.Reply_FromHost_HW34), global::com.mirle.ibgAK0.EAP.HostMessage.E2H.Reply_FromHost_HW34.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "CODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.E2H.SendHost_EW34), global::com.mirle.ibgAK0.EAP.HostMessage.E2H.SendHost_EW34.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "BUNDLEID", "DELETELOCATION" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.E2H.Reply_FromHost_HW35), global::com.mirle.ibgAK0.EAP.HostMessage.E2H.Reply_FromHost_HW35.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "CODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.E2H.SendHost_EW35), global::com.mirle.ibgAK0.EAP.HostMessage.E2H.SendHost_EW35.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "TRANSFERTYPE", "BUNDLEID", "LOCATION" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.E2H.Reply_FromHost_HW36), global::com.mirle.ibgAK0.EAP.HostMessage.E2H.Reply_FromHost_HW36.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "CODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.E2H.SendHost_EW36), global::com.mirle.ibgAK0.EAP.HostMessage.E2H.SendHost_EW36.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "LOCATION", "BUNDLEID", "EVENTTYPE", "TRAYTYPE", "CODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.E2H.Reply_FromHost_HS45), global::com.mirle.ibgAK0.EAP.HostMessage.E2H.Reply_FromHost_HS45.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.E2H.SendHost_ES45), global::com.mirle.ibgAK0.EAP.HostMessage.E2H.SendHost_ES45.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.E2H.Reply_FromHost_HS46), global::com.mirle.ibgAK0.EAP.HostMessage.E2H.Reply_FromHost_HS46.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.E2H.SendHost_ES46), global::com.mirle.ibgAK0.EAP.HostMessage.E2H.SendHost_ES46.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "EQUIPMENTSTATUS", "CIMMODE", "RUNMODE", "OPERATIONMODE", "ALARMWARNINGHAPPEN" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.E2H.Reply_FromHost_HS49), global::com.mirle.ibgAK0.EAP.HostMessage.E2H.Reply_FromHost_HS49.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "CODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.E2H.SendHost_ES49), global::com.mirle.ibgAK0.EAP.HostMessage.E2H.SendHost_ES49.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "ALARMSTATUS", "ALARMLEVEL", "ALARMCODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.E2H.Reply_FromHost_HS54), global::com.mirle.ibgAK0.EAP.HostMessage.E2H.Reply_FromHost_HS54.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "CODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.E2H.SendHost_ES54), global::com.mirle.ibgAK0.EAP.HostMessage.E2H.SendHost_ES54.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "BCRBundleID", "VirtualBundleID", "MATERIALPRESENT", "EXECUTIONCMDSEQUENCENO" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///From EQ (EAP send to MCS)
  /// </summary>
  public sealed partial class Reply_FromHost_HP11 : pb::IMessage<Reply_FromHost_HP11>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Reply_FromHost_HP11> _parser = new pb::MessageParser<Reply_FromHost_HP11>(() => new Reply_FromHost_HP11());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reply_FromHost_HP11> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.E2H.EAPK11E2HReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HP11() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HP11(Reply_FromHost_HP11 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      cODE_ = other.cODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HP11 Clone() {
      return new Reply_FromHost_HP11(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CODE" field.</summary>
    public const int CODEFieldNumber = 6;
    private string cODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CODE {
      get { return cODE_; }
      set {
        cODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reply_FromHost_HP11);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reply_FromHost_HP11 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (CODE != other.CODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (CODE.Length != 0) hash ^= CODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (CODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reply_FromHost_HP11 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.CODE.Length != 0) {
        CODE = other.CODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendHost_EP11 : pb::IMessage<SendHost_EP11>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendHost_EP11> _parser = new pb::MessageParser<SendHost_EP11>(() => new SendHost_EP11());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendHost_EP11> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.E2H.EAPK11E2HReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_EP11() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_EP11(SendHost_EP11 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      bUFFERID_ = other.bUFFERID_;
      bUNDLEID_ = other.bUNDLEID_;
      sTATUS_ = other.sTATUS_;
      tRAYTYPE_ = other.tRAYTYPE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_EP11 Clone() {
      return new SendHost_EP11(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BUFFER_ID" field.</summary>
    public const int BUFFERIDFieldNumber = 6;
    private string bUFFERID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BUFFERID {
      get { return bUFFERID_; }
      set {
        bUFFERID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BUNDLE_ID" field.</summary>
    public const int BUNDLEIDFieldNumber = 7;
    private string bUNDLEID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BUNDLEID {
      get { return bUNDLEID_; }
      set {
        bUNDLEID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "STATUS" field.</summary>
    public const int STATUSFieldNumber = 8;
    private string sTATUS_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string STATUS {
      get { return sTATUS_; }
      set {
        sTATUS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TRAY_TYPE" field.</summary>
    public const int TRAYTYPEFieldNumber = 9;
    private string tRAYTYPE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TRAYTYPE {
      get { return tRAYTYPE_; }
      set {
        tRAYTYPE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendHost_EP11);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendHost_EP11 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (BUFFERID != other.BUFFERID) return false;
      if (BUNDLEID != other.BUNDLEID) return false;
      if (STATUS != other.STATUS) return false;
      if (TRAYTYPE != other.TRAYTYPE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (BUFFERID.Length != 0) hash ^= BUFFERID.GetHashCode();
      if (BUNDLEID.Length != 0) hash ^= BUNDLEID.GetHashCode();
      if (STATUS.Length != 0) hash ^= STATUS.GetHashCode();
      if (TRAYTYPE.Length != 0) hash ^= TRAYTYPE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (BUFFERID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BUFFERID);
      }
      if (BUNDLEID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BUNDLEID);
      }
      if (STATUS.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(STATUS);
      }
      if (TRAYTYPE.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TRAYTYPE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (BUFFERID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BUFFERID);
      }
      if (BUNDLEID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BUNDLEID);
      }
      if (STATUS.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(STATUS);
      }
      if (TRAYTYPE.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TRAYTYPE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (BUFFERID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BUFFERID);
      }
      if (BUNDLEID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BUNDLEID);
      }
      if (STATUS.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(STATUS);
      }
      if (TRAYTYPE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TRAYTYPE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendHost_EP11 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.BUFFERID.Length != 0) {
        BUFFERID = other.BUFFERID;
      }
      if (other.BUNDLEID.Length != 0) {
        BUNDLEID = other.BUNDLEID;
      }
      if (other.STATUS.Length != 0) {
        STATUS = other.STATUS;
      }
      if (other.TRAYTYPE.Length != 0) {
        TRAYTYPE = other.TRAYTYPE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            BUFFERID = input.ReadString();
            break;
          }
          case 58: {
            BUNDLEID = input.ReadString();
            break;
          }
          case 66: {
            STATUS = input.ReadString();
            break;
          }
          case 74: {
            TRAYTYPE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            BUFFERID = input.ReadString();
            break;
          }
          case 58: {
            BUNDLEID = input.ReadString();
            break;
          }
          case 66: {
            STATUS = input.ReadString();
            break;
          }
          case 74: {
            TRAYTYPE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Reply_FromHost_HW34 : pb::IMessage<Reply_FromHost_HW34>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Reply_FromHost_HW34> _parser = new pb::MessageParser<Reply_FromHost_HW34>(() => new Reply_FromHost_HW34());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reply_FromHost_HW34> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.E2H.EAPK11E2HReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HW34() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HW34(Reply_FromHost_HW34 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      cODE_ = other.cODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HW34 Clone() {
      return new Reply_FromHost_HW34(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CODE" field.</summary>
    public const int CODEFieldNumber = 6;
    private string cODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CODE {
      get { return cODE_; }
      set {
        cODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reply_FromHost_HW34);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reply_FromHost_HW34 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (CODE != other.CODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (CODE.Length != 0) hash ^= CODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (CODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reply_FromHost_HW34 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.CODE.Length != 0) {
        CODE = other.CODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendHost_EW34 : pb::IMessage<SendHost_EW34>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendHost_EW34> _parser = new pb::MessageParser<SendHost_EW34>(() => new SendHost_EW34());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendHost_EW34> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.E2H.EAPK11E2HReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_EW34() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_EW34(SendHost_EW34 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      bUNDLEID_ = other.bUNDLEID_;
      dELETELOCATION_ = other.dELETELOCATION_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_EW34 Clone() {
      return new SendHost_EW34(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BUNDLE_ID" field.</summary>
    public const int BUNDLEIDFieldNumber = 6;
    private string bUNDLEID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BUNDLEID {
      get { return bUNDLEID_; }
      set {
        bUNDLEID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DELETE_LOCATION" field.</summary>
    public const int DELETELOCATIONFieldNumber = 7;
    private string dELETELOCATION_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DELETELOCATION {
      get { return dELETELOCATION_; }
      set {
        dELETELOCATION_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendHost_EW34);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendHost_EW34 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (BUNDLEID != other.BUNDLEID) return false;
      if (DELETELOCATION != other.DELETELOCATION) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (BUNDLEID.Length != 0) hash ^= BUNDLEID.GetHashCode();
      if (DELETELOCATION.Length != 0) hash ^= DELETELOCATION.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (BUNDLEID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BUNDLEID);
      }
      if (DELETELOCATION.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DELETELOCATION);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (BUNDLEID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BUNDLEID);
      }
      if (DELETELOCATION.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DELETELOCATION);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (BUNDLEID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BUNDLEID);
      }
      if (DELETELOCATION.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DELETELOCATION);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendHost_EW34 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.BUNDLEID.Length != 0) {
        BUNDLEID = other.BUNDLEID;
      }
      if (other.DELETELOCATION.Length != 0) {
        DELETELOCATION = other.DELETELOCATION;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            BUNDLEID = input.ReadString();
            break;
          }
          case 58: {
            DELETELOCATION = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            BUNDLEID = input.ReadString();
            break;
          }
          case 58: {
            DELETELOCATION = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Reply_FromHost_HW35 : pb::IMessage<Reply_FromHost_HW35>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Reply_FromHost_HW35> _parser = new pb::MessageParser<Reply_FromHost_HW35>(() => new Reply_FromHost_HW35());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reply_FromHost_HW35> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.E2H.EAPK11E2HReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HW35() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HW35(Reply_FromHost_HW35 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      cODE_ = other.cODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HW35 Clone() {
      return new Reply_FromHost_HW35(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CODE" field.</summary>
    public const int CODEFieldNumber = 6;
    private string cODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CODE {
      get { return cODE_; }
      set {
        cODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reply_FromHost_HW35);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reply_FromHost_HW35 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (CODE != other.CODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (CODE.Length != 0) hash ^= CODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (CODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reply_FromHost_HW35 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.CODE.Length != 0) {
        CODE = other.CODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendHost_EW35 : pb::IMessage<SendHost_EW35>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendHost_EW35> _parser = new pb::MessageParser<SendHost_EW35>(() => new SendHost_EW35());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendHost_EW35> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.E2H.EAPK11E2HReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_EW35() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_EW35(SendHost_EW35 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      tRANSFERTYPE_ = other.tRANSFERTYPE_;
      bUNDLEID_ = other.bUNDLEID_;
      lOCATION_ = other.lOCATION_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_EW35 Clone() {
      return new SendHost_EW35(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TRANSFER_TYPE" field.</summary>
    public const int TRANSFERTYPEFieldNumber = 6;
    private string tRANSFERTYPE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TRANSFERTYPE {
      get { return tRANSFERTYPE_; }
      set {
        tRANSFERTYPE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BUNDLE_ID" field.</summary>
    public const int BUNDLEIDFieldNumber = 7;
    private string bUNDLEID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BUNDLEID {
      get { return bUNDLEID_; }
      set {
        bUNDLEID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LOCATION" field.</summary>
    public const int LOCATIONFieldNumber = 8;
    private string lOCATION_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LOCATION {
      get { return lOCATION_; }
      set {
        lOCATION_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendHost_EW35);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendHost_EW35 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (TRANSFERTYPE != other.TRANSFERTYPE) return false;
      if (BUNDLEID != other.BUNDLEID) return false;
      if (LOCATION != other.LOCATION) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (TRANSFERTYPE.Length != 0) hash ^= TRANSFERTYPE.GetHashCode();
      if (BUNDLEID.Length != 0) hash ^= BUNDLEID.GetHashCode();
      if (LOCATION.Length != 0) hash ^= LOCATION.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (TRANSFERTYPE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TRANSFERTYPE);
      }
      if (BUNDLEID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BUNDLEID);
      }
      if (LOCATION.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(LOCATION);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (TRANSFERTYPE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TRANSFERTYPE);
      }
      if (BUNDLEID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BUNDLEID);
      }
      if (LOCATION.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(LOCATION);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (TRANSFERTYPE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TRANSFERTYPE);
      }
      if (BUNDLEID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BUNDLEID);
      }
      if (LOCATION.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LOCATION);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendHost_EW35 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.TRANSFERTYPE.Length != 0) {
        TRANSFERTYPE = other.TRANSFERTYPE;
      }
      if (other.BUNDLEID.Length != 0) {
        BUNDLEID = other.BUNDLEID;
      }
      if (other.LOCATION.Length != 0) {
        LOCATION = other.LOCATION;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            TRANSFERTYPE = input.ReadString();
            break;
          }
          case 58: {
            BUNDLEID = input.ReadString();
            break;
          }
          case 66: {
            LOCATION = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            TRANSFERTYPE = input.ReadString();
            break;
          }
          case 58: {
            BUNDLEID = input.ReadString();
            break;
          }
          case 66: {
            LOCATION = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Reply_FromHost_HW36 : pb::IMessage<Reply_FromHost_HW36>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Reply_FromHost_HW36> _parser = new pb::MessageParser<Reply_FromHost_HW36>(() => new Reply_FromHost_HW36());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reply_FromHost_HW36> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.E2H.EAPK11E2HReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HW36() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HW36(Reply_FromHost_HW36 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      cODE_ = other.cODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HW36 Clone() {
      return new Reply_FromHost_HW36(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CODE" field.</summary>
    public const int CODEFieldNumber = 6;
    private string cODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CODE {
      get { return cODE_; }
      set {
        cODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reply_FromHost_HW36);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reply_FromHost_HW36 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (CODE != other.CODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (CODE.Length != 0) hash ^= CODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (CODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reply_FromHost_HW36 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.CODE.Length != 0) {
        CODE = other.CODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendHost_EW36 : pb::IMessage<SendHost_EW36>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendHost_EW36> _parser = new pb::MessageParser<SendHost_EW36>(() => new SendHost_EW36());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendHost_EW36> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.E2H.EAPK11E2HReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_EW36() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_EW36(SendHost_EW36 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      lOCATION_ = other.lOCATION_;
      bUNDLEID_ = other.bUNDLEID_;
      eVENTTYPE_ = other.eVENTTYPE_;
      tRAYTYPE_ = other.tRAYTYPE_;
      cODE_ = other.cODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_EW36 Clone() {
      return new SendHost_EW36(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LOCATION" field.</summary>
    public const int LOCATIONFieldNumber = 6;
    private string lOCATION_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LOCATION {
      get { return lOCATION_; }
      set {
        lOCATION_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BUNDLE_ID" field.</summary>
    public const int BUNDLEIDFieldNumber = 7;
    private string bUNDLEID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BUNDLEID {
      get { return bUNDLEID_; }
      set {
        bUNDLEID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EVENT_TYPE" field.</summary>
    public const int EVENTTYPEFieldNumber = 8;
    private string eVENTTYPE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EVENTTYPE {
      get { return eVENTTYPE_; }
      set {
        eVENTTYPE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TRAY_TYPE" field.</summary>
    public const int TRAYTYPEFieldNumber = 9;
    private string tRAYTYPE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TRAYTYPE {
      get { return tRAYTYPE_; }
      set {
        tRAYTYPE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CODE" field.</summary>
    public const int CODEFieldNumber = 10;
    private string cODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CODE {
      get { return cODE_; }
      set {
        cODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendHost_EW36);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendHost_EW36 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (LOCATION != other.LOCATION) return false;
      if (BUNDLEID != other.BUNDLEID) return false;
      if (EVENTTYPE != other.EVENTTYPE) return false;
      if (TRAYTYPE != other.TRAYTYPE) return false;
      if (CODE != other.CODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (LOCATION.Length != 0) hash ^= LOCATION.GetHashCode();
      if (BUNDLEID.Length != 0) hash ^= BUNDLEID.GetHashCode();
      if (EVENTTYPE.Length != 0) hash ^= EVENTTYPE.GetHashCode();
      if (TRAYTYPE.Length != 0) hash ^= TRAYTYPE.GetHashCode();
      if (CODE.Length != 0) hash ^= CODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (LOCATION.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LOCATION);
      }
      if (BUNDLEID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BUNDLEID);
      }
      if (EVENTTYPE.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(EVENTTYPE);
      }
      if (TRAYTYPE.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TRAYTYPE);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (LOCATION.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LOCATION);
      }
      if (BUNDLEID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BUNDLEID);
      }
      if (EVENTTYPE.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(EVENTTYPE);
      }
      if (TRAYTYPE.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TRAYTYPE);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (LOCATION.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LOCATION);
      }
      if (BUNDLEID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BUNDLEID);
      }
      if (EVENTTYPE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EVENTTYPE);
      }
      if (TRAYTYPE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TRAYTYPE);
      }
      if (CODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendHost_EW36 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.LOCATION.Length != 0) {
        LOCATION = other.LOCATION;
      }
      if (other.BUNDLEID.Length != 0) {
        BUNDLEID = other.BUNDLEID;
      }
      if (other.EVENTTYPE.Length != 0) {
        EVENTTYPE = other.EVENTTYPE;
      }
      if (other.TRAYTYPE.Length != 0) {
        TRAYTYPE = other.TRAYTYPE;
      }
      if (other.CODE.Length != 0) {
        CODE = other.CODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            LOCATION = input.ReadString();
            break;
          }
          case 58: {
            BUNDLEID = input.ReadString();
            break;
          }
          case 66: {
            EVENTTYPE = input.ReadString();
            break;
          }
          case 74: {
            TRAYTYPE = input.ReadString();
            break;
          }
          case 82: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            LOCATION = input.ReadString();
            break;
          }
          case 58: {
            BUNDLEID = input.ReadString();
            break;
          }
          case 66: {
            EVENTTYPE = input.ReadString();
            break;
          }
          case 74: {
            TRAYTYPE = input.ReadString();
            break;
          }
          case 82: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Reply_FromHost_HS45 : pb::IMessage<Reply_FromHost_HS45>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Reply_FromHost_HS45> _parser = new pb::MessageParser<Reply_FromHost_HS45>(() => new Reply_FromHost_HS45());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reply_FromHost_HS45> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.E2H.EAPK11E2HReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HS45() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HS45(Reply_FromHost_HS45 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HS45 Clone() {
      return new Reply_FromHost_HS45(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reply_FromHost_HS45);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reply_FromHost_HS45 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reply_FromHost_HS45 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendHost_ES45 : pb::IMessage<SendHost_ES45>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendHost_ES45> _parser = new pb::MessageParser<SendHost_ES45>(() => new SendHost_ES45());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendHost_ES45> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.E2H.EAPK11E2HReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_ES45() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_ES45(SendHost_ES45 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_ES45 Clone() {
      return new SendHost_ES45(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendHost_ES45);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendHost_ES45 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendHost_ES45 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Reply_FromHost_HS46 : pb::IMessage<Reply_FromHost_HS46>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Reply_FromHost_HS46> _parser = new pb::MessageParser<Reply_FromHost_HS46>(() => new Reply_FromHost_HS46());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reply_FromHost_HS46> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.E2H.EAPK11E2HReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HS46() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HS46(Reply_FromHost_HS46 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HS46 Clone() {
      return new Reply_FromHost_HS46(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reply_FromHost_HS46);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reply_FromHost_HS46 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reply_FromHost_HS46 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendHost_ES46 : pb::IMessage<SendHost_ES46>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendHost_ES46> _parser = new pb::MessageParser<SendHost_ES46>(() => new SendHost_ES46());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendHost_ES46> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.E2H.EAPK11E2HReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_ES46() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_ES46(SendHost_ES46 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      eQUIPMENTSTATUS_ = other.eQUIPMENTSTATUS_;
      cIMMODE_ = other.cIMMODE_;
      rUNMODE_ = other.rUNMODE_;
      oPERATIONMODE_ = other.oPERATIONMODE_;
      aLARMWARNINGHAPPEN_ = other.aLARMWARNINGHAPPEN_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_ES46 Clone() {
      return new SendHost_ES46(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQUIPMENT_STATUS" field.</summary>
    public const int EQUIPMENTSTATUSFieldNumber = 6;
    private string eQUIPMENTSTATUS_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQUIPMENTSTATUS {
      get { return eQUIPMENTSTATUS_; }
      set {
        eQUIPMENTSTATUS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CIM_MODE" field.</summary>
    public const int CIMMODEFieldNumber = 7;
    private string cIMMODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CIMMODE {
      get { return cIMMODE_; }
      set {
        cIMMODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RUN_MODE" field.</summary>
    public const int RUNMODEFieldNumber = 8;
    private string rUNMODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RUNMODE {
      get { return rUNMODE_; }
      set {
        rUNMODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OPERATION_MODE" field.</summary>
    public const int OPERATIONMODEFieldNumber = 9;
    private string oPERATIONMODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OPERATIONMODE {
      get { return oPERATIONMODE_; }
      set {
        oPERATIONMODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ALARMWARNINGHAPPEN" field.</summary>
    public const int ALARMWARNINGHAPPENFieldNumber = 10;
    private string aLARMWARNINGHAPPEN_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ALARMWARNINGHAPPEN {
      get { return aLARMWARNINGHAPPEN_; }
      set {
        aLARMWARNINGHAPPEN_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendHost_ES46);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendHost_ES46 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (EQUIPMENTSTATUS != other.EQUIPMENTSTATUS) return false;
      if (CIMMODE != other.CIMMODE) return false;
      if (RUNMODE != other.RUNMODE) return false;
      if (OPERATIONMODE != other.OPERATIONMODE) return false;
      if (ALARMWARNINGHAPPEN != other.ALARMWARNINGHAPPEN) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (EQUIPMENTSTATUS.Length != 0) hash ^= EQUIPMENTSTATUS.GetHashCode();
      if (CIMMODE.Length != 0) hash ^= CIMMODE.GetHashCode();
      if (RUNMODE.Length != 0) hash ^= RUNMODE.GetHashCode();
      if (OPERATIONMODE.Length != 0) hash ^= OPERATIONMODE.GetHashCode();
      if (ALARMWARNINGHAPPEN.Length != 0) hash ^= ALARMWARNINGHAPPEN.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (EQUIPMENTSTATUS.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(EQUIPMENTSTATUS);
      }
      if (CIMMODE.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CIMMODE);
      }
      if (RUNMODE.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(RUNMODE);
      }
      if (OPERATIONMODE.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(OPERATIONMODE);
      }
      if (ALARMWARNINGHAPPEN.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ALARMWARNINGHAPPEN);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (EQUIPMENTSTATUS.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(EQUIPMENTSTATUS);
      }
      if (CIMMODE.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CIMMODE);
      }
      if (RUNMODE.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(RUNMODE);
      }
      if (OPERATIONMODE.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(OPERATIONMODE);
      }
      if (ALARMWARNINGHAPPEN.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ALARMWARNINGHAPPEN);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (EQUIPMENTSTATUS.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQUIPMENTSTATUS);
      }
      if (CIMMODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CIMMODE);
      }
      if (RUNMODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RUNMODE);
      }
      if (OPERATIONMODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OPERATIONMODE);
      }
      if (ALARMWARNINGHAPPEN.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ALARMWARNINGHAPPEN);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendHost_ES46 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.EQUIPMENTSTATUS.Length != 0) {
        EQUIPMENTSTATUS = other.EQUIPMENTSTATUS;
      }
      if (other.CIMMODE.Length != 0) {
        CIMMODE = other.CIMMODE;
      }
      if (other.RUNMODE.Length != 0) {
        RUNMODE = other.RUNMODE;
      }
      if (other.OPERATIONMODE.Length != 0) {
        OPERATIONMODE = other.OPERATIONMODE;
      }
      if (other.ALARMWARNINGHAPPEN.Length != 0) {
        ALARMWARNINGHAPPEN = other.ALARMWARNINGHAPPEN;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            EQUIPMENTSTATUS = input.ReadString();
            break;
          }
          case 58: {
            CIMMODE = input.ReadString();
            break;
          }
          case 66: {
            RUNMODE = input.ReadString();
            break;
          }
          case 74: {
            OPERATIONMODE = input.ReadString();
            break;
          }
          case 82: {
            ALARMWARNINGHAPPEN = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            EQUIPMENTSTATUS = input.ReadString();
            break;
          }
          case 58: {
            CIMMODE = input.ReadString();
            break;
          }
          case 66: {
            RUNMODE = input.ReadString();
            break;
          }
          case 74: {
            OPERATIONMODE = input.ReadString();
            break;
          }
          case 82: {
            ALARMWARNINGHAPPEN = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Reply_FromHost_HS49 : pb::IMessage<Reply_FromHost_HS49>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Reply_FromHost_HS49> _parser = new pb::MessageParser<Reply_FromHost_HS49>(() => new Reply_FromHost_HS49());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reply_FromHost_HS49> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.E2H.EAPK11E2HReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HS49() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HS49(Reply_FromHost_HS49 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      cODE_ = other.cODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HS49 Clone() {
      return new Reply_FromHost_HS49(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CODE" field.</summary>
    public const int CODEFieldNumber = 6;
    private string cODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CODE {
      get { return cODE_; }
      set {
        cODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reply_FromHost_HS49);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reply_FromHost_HS49 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (CODE != other.CODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (CODE.Length != 0) hash ^= CODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (CODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reply_FromHost_HS49 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.CODE.Length != 0) {
        CODE = other.CODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendHost_ES49 : pb::IMessage<SendHost_ES49>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendHost_ES49> _parser = new pb::MessageParser<SendHost_ES49>(() => new SendHost_ES49());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendHost_ES49> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.E2H.EAPK11E2HReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_ES49() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_ES49(SendHost_ES49 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      aLARMSTATUS_ = other.aLARMSTATUS_;
      aLARMLEVEL_ = other.aLARMLEVEL_;
      aLARMCODE_ = other.aLARMCODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_ES49 Clone() {
      return new SendHost_ES49(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ALARM_STATUS" field.</summary>
    public const int ALARMSTATUSFieldNumber = 6;
    private string aLARMSTATUS_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ALARMSTATUS {
      get { return aLARMSTATUS_; }
      set {
        aLARMSTATUS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ALARM_LEVEL" field.</summary>
    public const int ALARMLEVELFieldNumber = 7;
    private string aLARMLEVEL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ALARMLEVEL {
      get { return aLARMLEVEL_; }
      set {
        aLARMLEVEL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ALARM_CODE" field.</summary>
    public const int ALARMCODEFieldNumber = 8;
    private string aLARMCODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ALARMCODE {
      get { return aLARMCODE_; }
      set {
        aLARMCODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendHost_ES49);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendHost_ES49 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (ALARMSTATUS != other.ALARMSTATUS) return false;
      if (ALARMLEVEL != other.ALARMLEVEL) return false;
      if (ALARMCODE != other.ALARMCODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (ALARMSTATUS.Length != 0) hash ^= ALARMSTATUS.GetHashCode();
      if (ALARMLEVEL.Length != 0) hash ^= ALARMLEVEL.GetHashCode();
      if (ALARMCODE.Length != 0) hash ^= ALARMCODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (ALARMSTATUS.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ALARMSTATUS);
      }
      if (ALARMLEVEL.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ALARMLEVEL);
      }
      if (ALARMCODE.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ALARMCODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (ALARMSTATUS.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ALARMSTATUS);
      }
      if (ALARMLEVEL.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ALARMLEVEL);
      }
      if (ALARMCODE.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ALARMCODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (ALARMSTATUS.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ALARMSTATUS);
      }
      if (ALARMLEVEL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ALARMLEVEL);
      }
      if (ALARMCODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ALARMCODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendHost_ES49 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.ALARMSTATUS.Length != 0) {
        ALARMSTATUS = other.ALARMSTATUS;
      }
      if (other.ALARMLEVEL.Length != 0) {
        ALARMLEVEL = other.ALARMLEVEL;
      }
      if (other.ALARMCODE.Length != 0) {
        ALARMCODE = other.ALARMCODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            ALARMSTATUS = input.ReadString();
            break;
          }
          case 58: {
            ALARMLEVEL = input.ReadString();
            break;
          }
          case 66: {
            ALARMCODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            ALARMSTATUS = input.ReadString();
            break;
          }
          case 58: {
            ALARMLEVEL = input.ReadString();
            break;
          }
          case 66: {
            ALARMCODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Reply_FromHost_HS54 : pb::IMessage<Reply_FromHost_HS54>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Reply_FromHost_HS54> _parser = new pb::MessageParser<Reply_FromHost_HS54>(() => new Reply_FromHost_HS54());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reply_FromHost_HS54> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.E2H.EAPK11E2HReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HS54() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HS54(Reply_FromHost_HS54 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      cODE_ = other.cODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HS54 Clone() {
      return new Reply_FromHost_HS54(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CODE" field.</summary>
    public const int CODEFieldNumber = 6;
    private string cODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CODE {
      get { return cODE_; }
      set {
        cODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reply_FromHost_HS54);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reply_FromHost_HS54 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (CODE != other.CODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (CODE.Length != 0) hash ^= CODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (CODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reply_FromHost_HS54 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.CODE.Length != 0) {
        CODE = other.CODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendHost_ES54 : pb::IMessage<SendHost_ES54>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendHost_ES54> _parser = new pb::MessageParser<SendHost_ES54>(() => new SendHost_ES54());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendHost_ES54> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.E2H.EAPK11E2HReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_ES54() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_ES54(SendHost_ES54 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      bCRBundleID_ = other.bCRBundleID_;
      virtualBundleID_ = other.virtualBundleID_;
      mATERIALPRESENT_ = other.mATERIALPRESENT_;
      eXECUTIONCMDSEQUENCENO_ = other.eXECUTIONCMDSEQUENCENO_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_ES54 Clone() {
      return new SendHost_ES54(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BCR_Bundle_ID" field.</summary>
    public const int BCRBundleIDFieldNumber = 6;
    private string bCRBundleID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BCRBundleID {
      get { return bCRBundleID_; }
      set {
        bCRBundleID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Virtual_Bundle_ID" field.</summary>
    public const int VirtualBundleIDFieldNumber = 7;
    private string virtualBundleID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VirtualBundleID {
      get { return virtualBundleID_; }
      set {
        virtualBundleID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MATERIAL_PRESENT" field.</summary>
    public const int MATERIALPRESENTFieldNumber = 8;
    private string mATERIALPRESENT_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MATERIALPRESENT {
      get { return mATERIALPRESENT_; }
      set {
        mATERIALPRESENT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EXECUTION_CMD_SEQUENCE_NO" field.</summary>
    public const int EXECUTIONCMDSEQUENCENOFieldNumber = 9;
    private string eXECUTIONCMDSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EXECUTIONCMDSEQUENCENO {
      get { return eXECUTIONCMDSEQUENCENO_; }
      set {
        eXECUTIONCMDSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendHost_ES54);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendHost_ES54 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (BCRBundleID != other.BCRBundleID) return false;
      if (VirtualBundleID != other.VirtualBundleID) return false;
      if (MATERIALPRESENT != other.MATERIALPRESENT) return false;
      if (EXECUTIONCMDSEQUENCENO != other.EXECUTIONCMDSEQUENCENO) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (BCRBundleID.Length != 0) hash ^= BCRBundleID.GetHashCode();
      if (VirtualBundleID.Length != 0) hash ^= VirtualBundleID.GetHashCode();
      if (MATERIALPRESENT.Length != 0) hash ^= MATERIALPRESENT.GetHashCode();
      if (EXECUTIONCMDSEQUENCENO.Length != 0) hash ^= EXECUTIONCMDSEQUENCENO.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (BCRBundleID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BCRBundleID);
      }
      if (VirtualBundleID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(VirtualBundleID);
      }
      if (MATERIALPRESENT.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(MATERIALPRESENT);
      }
      if (EXECUTIONCMDSEQUENCENO.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(EXECUTIONCMDSEQUENCENO);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (BCRBundleID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BCRBundleID);
      }
      if (VirtualBundleID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(VirtualBundleID);
      }
      if (MATERIALPRESENT.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(MATERIALPRESENT);
      }
      if (EXECUTIONCMDSEQUENCENO.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(EXECUTIONCMDSEQUENCENO);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (BCRBundleID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BCRBundleID);
      }
      if (VirtualBundleID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VirtualBundleID);
      }
      if (MATERIALPRESENT.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MATERIALPRESENT);
      }
      if (EXECUTIONCMDSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EXECUTIONCMDSEQUENCENO);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendHost_ES54 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.BCRBundleID.Length != 0) {
        BCRBundleID = other.BCRBundleID;
      }
      if (other.VirtualBundleID.Length != 0) {
        VirtualBundleID = other.VirtualBundleID;
      }
      if (other.MATERIALPRESENT.Length != 0) {
        MATERIALPRESENT = other.MATERIALPRESENT;
      }
      if (other.EXECUTIONCMDSEQUENCENO.Length != 0) {
        EXECUTIONCMDSEQUENCENO = other.EXECUTIONCMDSEQUENCENO;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            BCRBundleID = input.ReadString();
            break;
          }
          case 58: {
            VirtualBundleID = input.ReadString();
            break;
          }
          case 66: {
            MATERIALPRESENT = input.ReadString();
            break;
          }
          case 74: {
            EXECUTIONCMDSEQUENCENO = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            BCRBundleID = input.ReadString();
            break;
          }
          case 58: {
            VirtualBundleID = input.ReadString();
            break;
          }
          case 66: {
            MATERIALPRESENT = input.ReadString();
            break;
          }
          case 74: {
            EXECUTIONCMDSEQUENCENO = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
