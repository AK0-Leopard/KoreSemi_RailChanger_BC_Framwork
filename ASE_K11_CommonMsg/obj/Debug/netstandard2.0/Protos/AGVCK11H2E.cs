// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/AGVC_K11_H2E.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace com.mirle.ibgAK0.EAP.HostMessage.H2E {

  /// <summary>Holder for reflection information generated from Protos/AGVC_K11_H2E.proto</summary>
  public static partial class AGVCK11H2EReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/AGVC_K11_H2E.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AGVCK11H2EReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlQcm90b3MvQUdWQ19LMTFfSDJFLnByb3RvIrIBChpUZXN0X0VuaGFuY2Vk",
            "UmVtb3RlQ29tbWFuZBIPCgdkYXRhX2lkGAEgASgFEhAKCG9ial9zcGVjGAIg",
            "ASgJEhIKCmNvbW1hbmRfaWQYAyABKAkSEAoIcHJpb3JpdHkYBCABKAkSDwoH",
            "cmVwbGFjZRgFIAEoCRISCgpjYXJyaWVyX2lkGAYgASgJEhMKC3NvdXJjZV9w",
            "b3J0GAcgASgJEhEKCWRlc3RfcG9ydBgIIAEoCSIwCh1UZXN0X0VuaGFuY2Vk",
            "UmVtb3RlQ29tbWFuZEFjaxIPCgdtZXNzYWdlGAEgASgJIp8BCg1Gcm9tSG9z",
            "dF9IUDAyEhIKCkZVTkNUSU9OSUQYASABKAkSGgoSRlVOQ1RJT05TRVFVRU5D",
            "RU5PGAIgASgJEhQKDEZVTkNUSU9OTkFNRRgDIAEoCRIMCgRFUUlEGAQgASgJ",
            "EhMKC1JFUE9SVF9USU1FGAUgASgJEhEKCUJVRkZFUl9JRBgGIAEoCRISCgpU",
            "T19QT1JUX0lEGAcgASgJIocBCg5SZXBseUhvc3RfRVAwMhISCgpGVU5DVElP",
            "TklEGAEgASgJEhoKEkZVTkNUSU9OU0VRVUVOQ0VOTxgCIAEoCRIUCgxGVU5D",
            "VElPTk5BTUUYAyABKAkSDAoERVFJRBgEIAEoCRITCgtSRVBPUlRfVElNRRgF",
            "IAEoCRIMCgRDT0RFGAYgASgJIrkBCg1Gcm9tSG9zdF9IVzMzEhIKCkZVTkNU",
            "SU9OSUQYASABKAkSGgoSRlVOQ1RJT05TRVFVRU5DRU5PGAIgASgJEhQKDEZV",
            "TkNUSU9OTkFNRRgDIAEoCRIMCgRFUUlEGAQgASgJEhMKC1JFUE9SVF9USU1F",
            "GAUgASgJEhEKCUJVTkRMRV9JRBgGIAEoCRIZChFUT19CVUZGRVJfUE9SVF9J",
            "RBgHIAEoCRIRCglUUkFZX1RZUEUYCCABKAkihwEKDlJlcGx5SG9zdF9FVzMz",
            "EhIKCkZVTkNUSU9OSUQYASABKAkSGgoSRlVOQ1RJT05TRVFVRU5DRU5PGAIg",
            "ASgJEhQKDEZVTkNUSU9OTkFNRRgDIAEoCRIMCgRFUUlEGAQgASgJEhMKC1JF",
            "UE9SVF9USU1FGAUgASgJEgwKBENPREUYBiABKAkinQEKDUZyb21Ib3N0X0hX",
            "MzcSEgoKRlVOQ1RJT05JRBgBIAEoCRIaChJGVU5DVElPTlNFUVVFTkNFTk8Y",
            "AiABKAkSFAoMRlVOQ1RJT05OQU1FGAMgASgJEgwKBEVRSUQYBCABKAkSEwoL",
            "UkVQT1JUX1RJTUUYBSABKAkSEQoJQlVORExFX0lEGAYgASgJEhAKCExPQ0FU",
            "SU9OGAcgASgJIocBCg5SZXBseUhvc3RfRVczNxISCgpGVU5DVElPTklEGAEg",
            "ASgJEhoKEkZVTkNUSU9OU0VRVUVOQ0VOTxgCIAEoCRIUCgxGVU5DVElPTk5B",
            "TUUYAyABKAkSDAoERVFJRBgEIAEoCRITCgtSRVBPUlRfVElNRRgFIAEoCRIM",
            "CgRDT0RFGAYgASgJIokBCg1Gcm9tSG9zdF9IUzQyEhIKCkZVTkNUSU9OSUQY",
            "ASABKAkSGgoSRlVOQ1RJT05TRVFVRU5DRU5PGAIgASgJEhQKDEZVTkNUSU9O",
            "TkFNRRgDIAEoCRIMCgRFUUlEGAQgASgJEhMKC1JFUE9SVF9USU1FGAUgASgJ",
            "Eg8KB01FU1NBR0UYBiABKAkieQoOUmVwbHlIb3N0X0VTNDISEgoKRlVOQ1RJ",
            "T05JRBgBIAEoCRIaChJGVU5DVElPTlNFUVVFTkNFTk8YAiABKAkSFAoMRlVO",
            "Q1RJT05OQU1FGAMgASgJEgwKBEVRSUQYBCABKAkSEwoLUkVQT1JUX1RJTUUY",
            "BSABKAkieAoNRnJvbUhvc3RfSFM0NBISCgpGVU5DVElPTklEGAEgASgJEhoK",
            "EkZVTkNUSU9OU0VRVUVOQ0VOTxgCIAEoCRIUCgxGVU5DVElPTk5BTUUYAyAB",
            "KAkSDAoERVFJRBgEIAEoCRITCgtSRVBPUlRfVElNRRgFIAEoCSJ5Cg5SZXBs",
            "eUhvc3RfRVM0NBISCgpGVU5DVElPTklEGAEgASgJEhoKEkZVTkNUSU9OU0VR",
            "VUVOQ0VOTxgCIAEoCRIUCgxGVU5DVElPTk5BTUUYAyABKAkSDAoERVFJRBgE",
            "IAEoCRITCgtSRVBPUlRfVElNRRgFIAEoCSKMAQoNRnJvbUhvc3RfSFM0OBIS",
            "CgpGVU5DVElPTklEGAEgASgJEhoKEkZVTkNUSU9OU0VRVUVOQ0VOTxgCIAEo",
            "CRIUCgxGVU5DVElPTk5BTUUYAyABKAkSDAoERVFJRBgEIAEoCRITCgtSRVBP",
            "UlRfVElNRRgFIAEoCRISCgpDSU1fT05fT0ZGGAYgASgJIocBCg5SZXBseUhv",
            "c3RfRVM0OBISCgpGVU5DVElPTklEGAEgASgJEhoKEkZVTkNUSU9OU0VRVUVO",
            "Q0VOTxgCIAEoCRIUCgxGVU5DVElPTk5BTUUYAyABKAkSDAoERVFJRBgEIAEo",
            "CRITCgtSRVBPUlRfVElNRRgFIAEoCRIMCgRDT0RFGAYgASgJIooBCg1Gcm9t",
            "SG9zdF9IUzY0EhIKCkZVTkNUSU9OSUQYASABKAkSGgoSRlVOQ1RJT05TRVFV",
            "RU5DRU5PGAIgASgJEhQKDEZVTkNUSU9OTkFNRRgDIAEoCRIMCgRFUUlEGAQg",
            "ASgJEhMKC1JFUE9SVF9USU1FGAUgASgJEhAKCFJVTl9NT0RFGAYgASgJInkK",
            "DlJlcGx5SG9zdF9FUzY0EhIKCkZVTkNUSU9OSUQYASABKAkSGgoSRlVOQ1RJ",
            "T05TRVFVRU5DRU5PGAIgASgJEhQKDEZVTkNUSU9OTkFNRRgDIAEoCRIMCgRF",
            "UUlEGAQgASgJEhMKC1JFUE9SVF9USU1FGAUgASgJIrMBCg1Gcm9tSG9zdF9I",
            "QzA1EhIKCkZVTkNUSU9OSUQYASABKAkSGgoSRlVOQ1RJT05TRVFVRU5DRU5P",
            "GAIgASgJEhQKDEZVTkNUSU9OTkFNRRgDIAEoCRIMCgRFUUlEGAQgASgJEhMK",
            "C1JFUE9SVF9USU1FGAUgASgJEg8KB1BPUlRfSUQYBiABKAkSEAoIQ0FQQUNJ",
            "VFkYByABKAkSFgoOT1RIRVJfQ0FQQUNJVFkYCCABKAkihwEKDlJlcGx5SG9z",
            "dF9FQzA1EhIKCkZVTkNUSU9OSUQYASABKAkSGgoSRlVOQ1RJT05TRVFVRU5D",
            "RU5PGAIgASgJEhQKDEZVTkNUSU9OTkFNRRgDIAEoCRIMCgRFUUlEGAQgASgJ",
            "EhMKC1JFUE9SVF9USU1FGAUgASgJEgwKBENPREUYBiABKAkieAoNRnJvbUhv",
            "c3RfSEMwNhISCgpGVU5DVElPTklEGAEgASgJEhoKEkZVTkNUSU9OU0VRVUVO",
            "Q0VOTxgCIAEoCRIUCgxGVU5DVElPTk5BTUUYAyABKAkSDAoERVFJRBgEIAEo",
            "CRITCgtSRVBPUlRfVElNRRgFIAEoCSKHAQoOUmVwbHlIb3N0X0VDMDYSEgoK",
            "RlVOQ1RJT05JRBgBIAEoCRIaChJGVU5DVElPTlNFUVVFTkNFTk8YAiABKAkS",
            "FAoMRlVOQ1RJT05OQU1FGAMgASgJEgwKBEVRSUQYBCABKAkSEwoLUkVQT1JU",
            "X1RJTUUYBSABKAkSDAoEQ09ERRgGIAEoCSKMAQoTUmVwbHlfRnJvbUhvc3Rf",
            "SFAxMRISCgpGVU5DVElPTklEGAEgASgJEhoKEkZVTkNUSU9OU0VRVUVOQ0VO",
            "TxgCIAEoCRIUCgxGVU5DVElPTk5BTUUYAyABKAkSDAoERVFJRBgEIAEoCRIT",
            "CgtSRVBPUlRfVElNRRgFIAEoCRIMCgRDT0RFGAYgASgJIsEBCg1TZW5kSG9z",
            "dF9FUDExEhIKCkZVTkNUSU9OSUQYASABKAkSGgoSRlVOQ1RJT05TRVFVRU5D",
            "RU5PGAIgASgJEhQKDEZVTkNUSU9OTkFNRRgDIAEoCRIMCgRFUUlEGAQgASgJ",
            "EhMKC1JFUE9SVF9USU1FGAUgASgJEhEKCUJVRkZFUl9JRBgGIAEoCRIRCglC",
            "VU5ETEVfSUQYByABKAkSDgoGU1RBVFVTGAggASgJEhEKCVRSQVlfVFlQRRgJ",
            "IAEoCSKMAQoTUmVwbHlfRnJvbUhvc3RfSFczNBISCgpGVU5DVElPTklEGAEg",
            "ASgJEhoKEkZVTkNUSU9OU0VRVUVOQ0VOTxgCIAEoCRIUCgxGVU5DVElPTk5B",
            "TUUYAyABKAkSDAoERVFJRBgEIAEoCRITCgtSRVBPUlRfVElNRRgFIAEoCRIM",
            "CgRDT0RFGAYgASgJIqQBCg1TZW5kSG9zdF9FVzM0EhIKCkZVTkNUSU9OSUQY",
            "ASABKAkSGgoSRlVOQ1RJT05TRVFVRU5DRU5PGAIgASgJEhQKDEZVTkNUSU9O",
            "TkFNRRgDIAEoCRIMCgRFUUlEGAQgASgJEhMKC1JFUE9SVF9USU1FGAUgASgJ",
            "EhEKCUJVTkRMRV9JRBgGIAEoCRIXCg9ERUxFVEVfTE9DQVRJT04YByABKAki",
            "jAEKE1JlcGx5X0Zyb21Ib3N0X0hXMzUSEgoKRlVOQ1RJT05JRBgBIAEoCRIa",
            "ChJGVU5DVElPTlNFUVVFTkNFTk8YAiABKAkSFAoMRlVOQ1RJT05OQU1FGAMg",
            "ASgJEgwKBEVRSUQYBCABKAkSEwoLUkVQT1JUX1RJTUUYBSABKAkSDAoEQ09E",
            "RRgGIAEoCSK0AQoNU2VuZEhvc3RfRVczNRISCgpGVU5DVElPTklEGAEgASgJ",
            "EhoKEkZVTkNUSU9OU0VRVUVOQ0VOTxgCIAEoCRIUCgxGVU5DVElPTk5BTUUY",
            "AyABKAkSDAoERVFJRBgEIAEoCRITCgtSRVBPUlRfVElNRRgFIAEoCRIVCg1U",
            "UkFOU0ZFUl9UWVBFGAYgASgJEhEKCUJVTkRMRV9JRBgHIAEoCRIQCghMT0NB",
            "VElPThgIIAEoCSKMAQoTUmVwbHlfRnJvbUhvc3RfSFczNhISCgpGVU5DVElP",
            "TklEGAEgASgJEhoKEkZVTkNUSU9OU0VRVUVOQ0VOTxgCIAEoCRIUCgxGVU5D",
            "VElPTk5BTUUYAyABKAkSDAoERVFJRBgEIAEoCRITCgtSRVBPUlRfVElNRRgF",
            "IAEoCRIMCgRDT0RFGAYgASgJItIBCg1TZW5kSG9zdF9FVzM2EhIKCkZVTkNU",
            "SU9OSUQYASABKAkSGgoSRlVOQ1RJT05TRVFVRU5DRU5PGAIgASgJEhQKDEZV",
            "TkNUSU9OTkFNRRgDIAEoCRIMCgRFUUlEGAQgASgJEhMKC1JFUE9SVF9USU1F",
            "GAUgASgJEhAKCExPQ0FUSU9OGAYgASgJEhEKCUJVTkRMRV9JRBgHIAEoCRIS",
            "CgpFVkVOVF9UWVBFGAggASgJEhEKCVRSQVlfVFlQRRgJIAEoCRIMCgRDT0RF",
            "GAogASgJIn4KE1JlcGx5X0Zyb21Ib3N0X0hTNDUSEgoKRlVOQ1RJT05JRBgB",
            "IAEoCRIaChJGVU5DVElPTlNFUVVFTkNFTk8YAiABKAkSFAoMRlVOQ1RJT05O",
            "QU1FGAMgASgJEgwKBEVRSUQYBCABKAkSEwoLUkVQT1JUX1RJTUUYBSABKAki",
            "eAoNU2VuZEhvc3RfRVM0NRISCgpGVU5DVElPTklEGAEgASgJEhoKEkZVTkNU",
            "SU9OU0VRVUVOQ0VOTxgCIAEoCRIUCgxGVU5DVElPTk5BTUUYAyABKAkSDAoE",
            "RVFJRBgEIAEoCRITCgtSRVBPUlRfVElNRRgFIAEoCSJ+ChNSZXBseV9Gcm9t",
            "SG9zdF9IUzQ2EhIKCkZVTkNUSU9OSUQYASABKAkSGgoSRlVOQ1RJT05TRVFV",
            "RU5DRU5PGAIgASgJEhQKDEZVTkNUSU9OTkFNRRgDIAEoCRIMCgRFUUlEGAQg",
            "ASgJEhMKC1JFUE9SVF9USU1FGAUgASgJIrYBCg1TZW5kSG9zdF9FUzQ2EhIK",
            "CkZVTkNUSU9OSUQYASABKAkSGgoSRlVOQ1RJT05TRVFVRU5DRU5PGAIgASgJ",
            "EhQKDEZVTkNUSU9OTkFNRRgDIAEoCRIMCgRFUUlEGAQgASgJEhMKC1JFUE9S",
            "VF9USU1FGAUgASgJEhgKEEVRVUlQTUVOVF9TVEFUVVMYBiABKAkSEAoIQ0lN",
            "X01PREUYByABKAkSEAoIUlVOX01PREUYCCABKAkifgoTUmVwbHlfRnJvbUhv",
            "c3RfSFM0ORISCgpGVU5DVElPTklEGAEgASgJEhoKEkZVTkNUSU9OU0VRVUVO",
            "Q0VOTxgCIAEoCRIUCgxGVU5DVElPTk5BTUUYAyABKAkSDAoERVFJRBgEIAEo",
            "CRITCgtSRVBPUlRfVElNRRgFIAEoCSK3AQoNU2VuZEhvc3RfRVM0ORISCgpG",
            "VU5DVElPTklEGAEgASgJEhoKEkZVTkNUSU9OU0VRVUVOQ0VOTxgCIAEoCRIU",
            "CgxGVU5DVElPTk5BTUUYAyABKAkSDAoERVFJRBgEIAEoCRITCgtSRVBPUlRf",
            "VElNRRgFIAEoCRIUCgxBTEFSTV9TVEFUVVMYBiABKAkSEwoLQUxBUk1fTEVW",
            "RUwYByABKAkSEgoKQUxBUk1fQ09ERRgIIAEoCSJ+ChNSZXBseV9Gcm9tSG9z",
            "dF9IUzU0EhIKCkZVTkNUSU9OSUQYASABKAkSGgoSRlVOQ1RJT05TRVFVRU5D",
            "RU5PGAIgASgJEhQKDEZVTkNUSU9OTkFNRRgDIAEoCRIMCgRFUUlEGAQgASgJ",
            "EhMKC1JFUE9SVF9USU1FGAUgASgJIucBCg1TZW5kSG9zdF9FUzU0EhIKCkZV",
            "TkNUSU9OSUQYASABKAkSGgoSRlVOQ1RJT05TRVFVRU5DRU5PGAIgASgJEhQK",
            "DEZVTkNUSU9OTkFNRRgDIAEoCRIMCgRFUUlEGAQgASgJEhMKC1JFUE9SVF9U",
            "SU1FGAUgASgJEhUKDUJDUl9CdW5kbGVfSUQYBiABKAkSGQoRVmlydHVhbF9C",
            "dW5kbGVfSUQYByABKAkSGAoQTUFURVJJQUxfUFJFU0VOVBgIIAEoCRIhChlF",
            "WEVDVVRJT05fQ01EX1NFUVVFTkNFX05PGAkgASgJMrEICgtFQVBfSzExX0gy",
            "RRI6ChVGcm9tSG9zdF9IUDAyX0NvbW1hbmQSDi5Gcm9tSG9zdF9IUDAyGg8u",
            "UmVwbHlIb3N0X0VQMDIiABI6ChVGcm9tSG9zdF9IVzMzX0NvbW1hbmQSDi5G",
            "cm9tSG9zdF9IVzMzGg8uUmVwbHlIb3N0X0VXMzMiABI6ChVGcm9tSG9zdF9I",
            "VzM3X0NvbW1hbmQSDi5Gcm9tSG9zdF9IVzM3Gg8uUmVwbHlIb3N0X0VXMzci",
            "ABI6ChVGcm9tSG9zdF9IUzQyX0NvbW1hbmQSDi5Gcm9tSG9zdF9IUzQyGg8u",
            "UmVwbHlIb3N0X0VTNDIiABI6ChVGcm9tSG9zdF9IUzQ0X0NvbW1hbmQSDi5G",
            "cm9tSG9zdF9IUzQ0Gg8uUmVwbHlIb3N0X0VTNDQiABI6ChVGcm9tSG9zdF9I",
            "UzQ4X0NvbW1hbmQSDi5Gcm9tSG9zdF9IUzQ4Gg8uUmVwbHlIb3N0X0VTNDgi",
            "ABI6ChVGcm9tSG9zdF9IUzY0X0NvbW1hbmQSDi5Gcm9tSG9zdF9IUzY0Gg8u",
            "UmVwbHlIb3N0X0VTNjQiABI6ChVGcm9tSG9zdF9IQzA1X0NvbW1hbmQSDi5G",
            "cm9tSG9zdF9IQzA1Gg8uUmVwbHlIb3N0X0VDMDUiABI6ChVGcm9tSG9zdF9I",
            "QzA2X0NvbW1hbmQSDi5Gcm9tSG9zdF9IQzA2Gg8uUmVwbHlIb3N0X0VDMDYi",
            "ABI/ChVTZW5kSG9zdF9FUDExX0NvbW1hbmQSDi5TZW5kSG9zdF9FUDExGhQu",
            "UmVwbHlfRnJvbUhvc3RfSFAxMSIAEj8KFVNlbmRIb3N0X0VXMzRfQ29tbWFu",
            "ZBIOLlNlbmRIb3N0X0VXMzQaFC5SZXBseV9Gcm9tSG9zdF9IVzM0IgASPwoV",
            "U2VuZEhvc3RfRVczNV9Db21tYW5kEg4uU2VuZEhvc3RfRVczNRoULlJlcGx5",
            "X0Zyb21Ib3N0X0hXMzUiABI/ChVTZW5kSG9zdF9FVzM2X0NvbW1hbmQSDi5T",
            "ZW5kSG9zdF9FVzM2GhQuUmVwbHlfRnJvbUhvc3RfSFczNiIAEj8KFVNlbmRI",
            "b3N0X0VTNDVfQ29tbWFuZBIOLlNlbmRIb3N0X0VTNDUaFC5SZXBseV9Gcm9t",
            "SG9zdF9IUzQ1IgASPwoVU2VuZEhvc3RfRVM0Nl9Db21tYW5kEg4uU2VuZEhv",
            "c3RfRVM0NhoULlJlcGx5X0Zyb21Ib3N0X0hTNDYiABI/ChVTZW5kSG9zdF9F",
            "UzQ5X0NvbW1hbmQSDi5TZW5kSG9zdF9FUzQ5GhQuUmVwbHlfRnJvbUhvc3Rf",
            "SFM0OSIAEj8KFVNlbmRIb3N0X0VTNTRfQ29tbWFuZBIOLlNlbmRIb3N0X0VT",
            "NTQaFC5SZXBseV9Gcm9tSG9zdF9IUzU0IgBCJ6oCJGNvbS5taXJsZS5pYmdB",
            "SzAuRUFQLkhvc3RNZXNzYWdlLkgyRWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.Test_EnhancedRemoteCommand), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.Test_EnhancedRemoteCommand.Parser, new[]{ "DataId", "ObjSpec", "CommandId", "Priority", "Replace", "CarrierId", "SourcePort", "DestPort" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.Test_EnhancedRemoteCommandAck), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.Test_EnhancedRemoteCommandAck.Parser, new[]{ "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HP02), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HP02.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "BUFFERID", "TOPORTID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_EP02), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_EP02.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "CODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HW33), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HW33.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "BUNDLEID", "TOBUFFERPORTID", "TRAYTYPE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_EW33), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_EW33.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "CODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HW37), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HW37.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "BUNDLEID", "LOCATION" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_EW37), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_EW37.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "CODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HS42), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HS42.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "MESSAGE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_ES42), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_ES42.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HS44), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HS44.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_ES44), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_ES44.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HS48), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HS48.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "CIMONOFF" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_ES48), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_ES48.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "CODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HS64), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HS64.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "RUNMODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_ES64), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_ES64.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HC05), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HC05.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "PORTID", "CAPACITY", "OTHERCAPACITY" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_EC05), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_EC05.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "CODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HC06), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.FromHost_HC06.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_EC06), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.ReplyHost_EC06.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "CODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.Reply_FromHost_HP11), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.Reply_FromHost_HP11.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "CODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.SendHost_EP11), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.SendHost_EP11.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "BUFFERID", "BUNDLEID", "STATUS", "TRAYTYPE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.Reply_FromHost_HW34), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.Reply_FromHost_HW34.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "CODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.SendHost_EW34), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.SendHost_EW34.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "BUNDLEID", "DELETELOCATION" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.Reply_FromHost_HW35), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.Reply_FromHost_HW35.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "CODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.SendHost_EW35), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.SendHost_EW35.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "TRANSFERTYPE", "BUNDLEID", "LOCATION" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.Reply_FromHost_HW36), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.Reply_FromHost_HW36.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "CODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.SendHost_EW36), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.SendHost_EW36.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "LOCATION", "BUNDLEID", "EVENTTYPE", "TRAYTYPE", "CODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.Reply_FromHost_HS45), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.Reply_FromHost_HS45.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.SendHost_ES45), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.SendHost_ES45.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.Reply_FromHost_HS46), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.Reply_FromHost_HS46.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.SendHost_ES46), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.SendHost_ES46.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "EQUIPMENTSTATUS", "CIMMODE", "RUNMODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.Reply_FromHost_HS49), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.Reply_FromHost_HS49.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.SendHost_ES49), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.SendHost_ES49.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "ALARMSTATUS", "ALARMLEVEL", "ALARMCODE" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.Reply_FromHost_HS54), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.Reply_FromHost_HS54.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.mirle.ibgAK0.EAP.HostMessage.H2E.SendHost_ES54), global::com.mirle.ibgAK0.EAP.HostMessage.H2E.SendHost_ES54.Parser, new[]{ "FUNCTIONID", "FUNCTIONSEQUENCENO", "FUNCTIONNAME", "EQID", "REPORTTIME", "BCRBundleID", "VirtualBundleID", "MATERIALPRESENT", "EXECUTIONCMDSEQUENCENO" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Test_EnhancedRemoteCommand : pb::IMessage<Test_EnhancedRemoteCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Test_EnhancedRemoteCommand> _parser = new pb::MessageParser<Test_EnhancedRemoteCommand>(() => new Test_EnhancedRemoteCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Test_EnhancedRemoteCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test_EnhancedRemoteCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test_EnhancedRemoteCommand(Test_EnhancedRemoteCommand other) : this() {
      dataId_ = other.dataId_;
      objSpec_ = other.objSpec_;
      commandId_ = other.commandId_;
      priority_ = other.priority_;
      replace_ = other.replace_;
      carrierId_ = other.carrierId_;
      sourcePort_ = other.sourcePort_;
      destPort_ = other.destPort_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test_EnhancedRemoteCommand Clone() {
      return new Test_EnhancedRemoteCommand(this);
    }

    /// <summary>Field number for the "data_id" field.</summary>
    public const int DataIdFieldNumber = 1;
    private int dataId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DataId {
      get { return dataId_; }
      set {
        dataId_ = value;
      }
    }

    /// <summary>Field number for the "obj_spec" field.</summary>
    public const int ObjSpecFieldNumber = 2;
    private string objSpec_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ObjSpec {
      get { return objSpec_; }
      set {
        objSpec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "command_id" field.</summary>
    public const int CommandIdFieldNumber = 3;
    private string commandId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CommandId {
      get { return commandId_; }
      set {
        commandId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 4;
    private string priority_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Priority {
      get { return priority_; }
      set {
        priority_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "replace" field.</summary>
    public const int ReplaceFieldNumber = 5;
    private string replace_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Replace {
      get { return replace_; }
      set {
        replace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "carrier_id" field.</summary>
    public const int CarrierIdFieldNumber = 6;
    private string carrierId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CarrierId {
      get { return carrierId_; }
      set {
        carrierId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_port" field.</summary>
    public const int SourcePortFieldNumber = 7;
    private string sourcePort_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourcePort {
      get { return sourcePort_; }
      set {
        sourcePort_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dest_port" field.</summary>
    public const int DestPortFieldNumber = 8;
    private string destPort_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestPort {
      get { return destPort_; }
      set {
        destPort_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Test_EnhancedRemoteCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Test_EnhancedRemoteCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataId != other.DataId) return false;
      if (ObjSpec != other.ObjSpec) return false;
      if (CommandId != other.CommandId) return false;
      if (Priority != other.Priority) return false;
      if (Replace != other.Replace) return false;
      if (CarrierId != other.CarrierId) return false;
      if (SourcePort != other.SourcePort) return false;
      if (DestPort != other.DestPort) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataId != 0) hash ^= DataId.GetHashCode();
      if (ObjSpec.Length != 0) hash ^= ObjSpec.GetHashCode();
      if (CommandId.Length != 0) hash ^= CommandId.GetHashCode();
      if (Priority.Length != 0) hash ^= Priority.GetHashCode();
      if (Replace.Length != 0) hash ^= Replace.GetHashCode();
      if (CarrierId.Length != 0) hash ^= CarrierId.GetHashCode();
      if (SourcePort.Length != 0) hash ^= SourcePort.GetHashCode();
      if (DestPort.Length != 0) hash ^= DestPort.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DataId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DataId);
      }
      if (ObjSpec.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ObjSpec);
      }
      if (CommandId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CommandId);
      }
      if (Priority.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Priority);
      }
      if (Replace.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Replace);
      }
      if (CarrierId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CarrierId);
      }
      if (SourcePort.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SourcePort);
      }
      if (DestPort.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(DestPort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DataId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DataId);
      }
      if (ObjSpec.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ObjSpec);
      }
      if (CommandId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CommandId);
      }
      if (Priority.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Priority);
      }
      if (Replace.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Replace);
      }
      if (CarrierId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CarrierId);
      }
      if (SourcePort.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SourcePort);
      }
      if (DestPort.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(DestPort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataId);
      }
      if (ObjSpec.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjSpec);
      }
      if (CommandId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CommandId);
      }
      if (Priority.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Priority);
      }
      if (Replace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Replace);
      }
      if (CarrierId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CarrierId);
      }
      if (SourcePort.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourcePort);
      }
      if (DestPort.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestPort);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Test_EnhancedRemoteCommand other) {
      if (other == null) {
        return;
      }
      if (other.DataId != 0) {
        DataId = other.DataId;
      }
      if (other.ObjSpec.Length != 0) {
        ObjSpec = other.ObjSpec;
      }
      if (other.CommandId.Length != 0) {
        CommandId = other.CommandId;
      }
      if (other.Priority.Length != 0) {
        Priority = other.Priority;
      }
      if (other.Replace.Length != 0) {
        Replace = other.Replace;
      }
      if (other.CarrierId.Length != 0) {
        CarrierId = other.CarrierId;
      }
      if (other.SourcePort.Length != 0) {
        SourcePort = other.SourcePort;
      }
      if (other.DestPort.Length != 0) {
        DestPort = other.DestPort;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DataId = input.ReadInt32();
            break;
          }
          case 18: {
            ObjSpec = input.ReadString();
            break;
          }
          case 26: {
            CommandId = input.ReadString();
            break;
          }
          case 34: {
            Priority = input.ReadString();
            break;
          }
          case 42: {
            Replace = input.ReadString();
            break;
          }
          case 50: {
            CarrierId = input.ReadString();
            break;
          }
          case 58: {
            SourcePort = input.ReadString();
            break;
          }
          case 66: {
            DestPort = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            DataId = input.ReadInt32();
            break;
          }
          case 18: {
            ObjSpec = input.ReadString();
            break;
          }
          case 26: {
            CommandId = input.ReadString();
            break;
          }
          case 34: {
            Priority = input.ReadString();
            break;
          }
          case 42: {
            Replace = input.ReadString();
            break;
          }
          case 50: {
            CarrierId = input.ReadString();
            break;
          }
          case 58: {
            SourcePort = input.ReadString();
            break;
          }
          case 66: {
            DestPort = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Test_EnhancedRemoteCommandAck : pb::IMessage<Test_EnhancedRemoteCommandAck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Test_EnhancedRemoteCommandAck> _parser = new pb::MessageParser<Test_EnhancedRemoteCommandAck>(() => new Test_EnhancedRemoteCommandAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Test_EnhancedRemoteCommandAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test_EnhancedRemoteCommandAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test_EnhancedRemoteCommandAck(Test_EnhancedRemoteCommandAck other) : this() {
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test_EnhancedRemoteCommandAck Clone() {
      return new Test_EnhancedRemoteCommandAck(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Test_EnhancedRemoteCommandAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Test_EnhancedRemoteCommandAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Test_EnhancedRemoteCommandAck other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///From Host (MCS send to EAP)
  /// </summary>
  public sealed partial class FromHost_HP02 : pb::IMessage<FromHost_HP02>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FromHost_HP02> _parser = new pb::MessageParser<FromHost_HP02>(() => new FromHost_HP02());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FromHost_HP02> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HP02() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HP02(FromHost_HP02 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      bUFFERID_ = other.bUFFERID_;
      tOPORTID_ = other.tOPORTID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HP02 Clone() {
      return new FromHost_HP02(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BUFFER_ID" field.</summary>
    public const int BUFFERIDFieldNumber = 6;
    private string bUFFERID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BUFFERID {
      get { return bUFFERID_; }
      set {
        bUFFERID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TO_PORT_ID" field.</summary>
    public const int TOPORTIDFieldNumber = 7;
    private string tOPORTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TOPORTID {
      get { return tOPORTID_; }
      set {
        tOPORTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FromHost_HP02);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FromHost_HP02 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (BUFFERID != other.BUFFERID) return false;
      if (TOPORTID != other.TOPORTID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (BUFFERID.Length != 0) hash ^= BUFFERID.GetHashCode();
      if (TOPORTID.Length != 0) hash ^= TOPORTID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (BUFFERID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BUFFERID);
      }
      if (TOPORTID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(TOPORTID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (BUFFERID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BUFFERID);
      }
      if (TOPORTID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(TOPORTID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (BUFFERID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BUFFERID);
      }
      if (TOPORTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TOPORTID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FromHost_HP02 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.BUFFERID.Length != 0) {
        BUFFERID = other.BUFFERID;
      }
      if (other.TOPORTID.Length != 0) {
        TOPORTID = other.TOPORTID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            BUFFERID = input.ReadString();
            break;
          }
          case 58: {
            TOPORTID = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            BUFFERID = input.ReadString();
            break;
          }
          case 58: {
            TOPORTID = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReplyHost_EP02 : pb::IMessage<ReplyHost_EP02>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReplyHost_EP02> _parser = new pb::MessageParser<ReplyHost_EP02>(() => new ReplyHost_EP02());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplyHost_EP02> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EP02() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EP02(ReplyHost_EP02 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      cODE_ = other.cODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EP02 Clone() {
      return new ReplyHost_EP02(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CODE" field.</summary>
    public const int CODEFieldNumber = 6;
    private string cODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CODE {
      get { return cODE_; }
      set {
        cODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplyHost_EP02);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplyHost_EP02 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (CODE != other.CODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (CODE.Length != 0) hash ^= CODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (CODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplyHost_EP02 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.CODE.Length != 0) {
        CODE = other.CODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FromHost_HW33 : pb::IMessage<FromHost_HW33>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FromHost_HW33> _parser = new pb::MessageParser<FromHost_HW33>(() => new FromHost_HW33());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FromHost_HW33> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HW33() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HW33(FromHost_HW33 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      bUNDLEID_ = other.bUNDLEID_;
      tOBUFFERPORTID_ = other.tOBUFFERPORTID_;
      tRAYTYPE_ = other.tRAYTYPE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HW33 Clone() {
      return new FromHost_HW33(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BUNDLE_ID" field.</summary>
    public const int BUNDLEIDFieldNumber = 6;
    private string bUNDLEID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BUNDLEID {
      get { return bUNDLEID_; }
      set {
        bUNDLEID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TO_BUFFER_PORT_ID" field.</summary>
    public const int TOBUFFERPORTIDFieldNumber = 7;
    private string tOBUFFERPORTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TOBUFFERPORTID {
      get { return tOBUFFERPORTID_; }
      set {
        tOBUFFERPORTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TRAY_TYPE" field.</summary>
    public const int TRAYTYPEFieldNumber = 8;
    private string tRAYTYPE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TRAYTYPE {
      get { return tRAYTYPE_; }
      set {
        tRAYTYPE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FromHost_HW33);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FromHost_HW33 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (BUNDLEID != other.BUNDLEID) return false;
      if (TOBUFFERPORTID != other.TOBUFFERPORTID) return false;
      if (TRAYTYPE != other.TRAYTYPE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (BUNDLEID.Length != 0) hash ^= BUNDLEID.GetHashCode();
      if (TOBUFFERPORTID.Length != 0) hash ^= TOBUFFERPORTID.GetHashCode();
      if (TRAYTYPE.Length != 0) hash ^= TRAYTYPE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (BUNDLEID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BUNDLEID);
      }
      if (TOBUFFERPORTID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(TOBUFFERPORTID);
      }
      if (TRAYTYPE.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(TRAYTYPE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (BUNDLEID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BUNDLEID);
      }
      if (TOBUFFERPORTID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(TOBUFFERPORTID);
      }
      if (TRAYTYPE.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(TRAYTYPE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (BUNDLEID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BUNDLEID);
      }
      if (TOBUFFERPORTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TOBUFFERPORTID);
      }
      if (TRAYTYPE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TRAYTYPE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FromHost_HW33 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.BUNDLEID.Length != 0) {
        BUNDLEID = other.BUNDLEID;
      }
      if (other.TOBUFFERPORTID.Length != 0) {
        TOBUFFERPORTID = other.TOBUFFERPORTID;
      }
      if (other.TRAYTYPE.Length != 0) {
        TRAYTYPE = other.TRAYTYPE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            BUNDLEID = input.ReadString();
            break;
          }
          case 58: {
            TOBUFFERPORTID = input.ReadString();
            break;
          }
          case 66: {
            TRAYTYPE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            BUNDLEID = input.ReadString();
            break;
          }
          case 58: {
            TOBUFFERPORTID = input.ReadString();
            break;
          }
          case 66: {
            TRAYTYPE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReplyHost_EW33 : pb::IMessage<ReplyHost_EW33>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReplyHost_EW33> _parser = new pb::MessageParser<ReplyHost_EW33>(() => new ReplyHost_EW33());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplyHost_EW33> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EW33() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EW33(ReplyHost_EW33 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      cODE_ = other.cODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EW33 Clone() {
      return new ReplyHost_EW33(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CODE" field.</summary>
    public const int CODEFieldNumber = 6;
    private string cODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CODE {
      get { return cODE_; }
      set {
        cODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplyHost_EW33);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplyHost_EW33 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (CODE != other.CODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (CODE.Length != 0) hash ^= CODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (CODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplyHost_EW33 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.CODE.Length != 0) {
        CODE = other.CODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FromHost_HW37 : pb::IMessage<FromHost_HW37>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FromHost_HW37> _parser = new pb::MessageParser<FromHost_HW37>(() => new FromHost_HW37());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FromHost_HW37> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HW37() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HW37(FromHost_HW37 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      bUNDLEID_ = other.bUNDLEID_;
      lOCATION_ = other.lOCATION_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HW37 Clone() {
      return new FromHost_HW37(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BUNDLE_ID" field.</summary>
    public const int BUNDLEIDFieldNumber = 6;
    private string bUNDLEID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BUNDLEID {
      get { return bUNDLEID_; }
      set {
        bUNDLEID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LOCATION" field.</summary>
    public const int LOCATIONFieldNumber = 7;
    private string lOCATION_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LOCATION {
      get { return lOCATION_; }
      set {
        lOCATION_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FromHost_HW37);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FromHost_HW37 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (BUNDLEID != other.BUNDLEID) return false;
      if (LOCATION != other.LOCATION) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (BUNDLEID.Length != 0) hash ^= BUNDLEID.GetHashCode();
      if (LOCATION.Length != 0) hash ^= LOCATION.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (BUNDLEID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BUNDLEID);
      }
      if (LOCATION.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LOCATION);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (BUNDLEID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BUNDLEID);
      }
      if (LOCATION.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LOCATION);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (BUNDLEID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BUNDLEID);
      }
      if (LOCATION.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LOCATION);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FromHost_HW37 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.BUNDLEID.Length != 0) {
        BUNDLEID = other.BUNDLEID;
      }
      if (other.LOCATION.Length != 0) {
        LOCATION = other.LOCATION;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            BUNDLEID = input.ReadString();
            break;
          }
          case 58: {
            LOCATION = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            BUNDLEID = input.ReadString();
            break;
          }
          case 58: {
            LOCATION = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReplyHost_EW37 : pb::IMessage<ReplyHost_EW37>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReplyHost_EW37> _parser = new pb::MessageParser<ReplyHost_EW37>(() => new ReplyHost_EW37());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplyHost_EW37> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EW37() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EW37(ReplyHost_EW37 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      cODE_ = other.cODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EW37 Clone() {
      return new ReplyHost_EW37(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CODE" field.</summary>
    public const int CODEFieldNumber = 6;
    private string cODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CODE {
      get { return cODE_; }
      set {
        cODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplyHost_EW37);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplyHost_EW37 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (CODE != other.CODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (CODE.Length != 0) hash ^= CODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (CODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplyHost_EW37 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.CODE.Length != 0) {
        CODE = other.CODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FromHost_HS42 : pb::IMessage<FromHost_HS42>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FromHost_HS42> _parser = new pb::MessageParser<FromHost_HS42>(() => new FromHost_HS42());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FromHost_HS42> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HS42() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HS42(FromHost_HS42 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      mESSAGE_ = other.mESSAGE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HS42 Clone() {
      return new FromHost_HS42(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MESSAGE" field.</summary>
    public const int MESSAGEFieldNumber = 6;
    private string mESSAGE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MESSAGE {
      get { return mESSAGE_; }
      set {
        mESSAGE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FromHost_HS42);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FromHost_HS42 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (MESSAGE != other.MESSAGE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (MESSAGE.Length != 0) hash ^= MESSAGE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (MESSAGE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(MESSAGE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (MESSAGE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(MESSAGE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (MESSAGE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MESSAGE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FromHost_HS42 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.MESSAGE.Length != 0) {
        MESSAGE = other.MESSAGE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            MESSAGE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            MESSAGE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReplyHost_ES42 : pb::IMessage<ReplyHost_ES42>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReplyHost_ES42> _parser = new pb::MessageParser<ReplyHost_ES42>(() => new ReplyHost_ES42());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplyHost_ES42> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_ES42() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_ES42(ReplyHost_ES42 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_ES42 Clone() {
      return new ReplyHost_ES42(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplyHost_ES42);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplyHost_ES42 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplyHost_ES42 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FromHost_HS44 : pb::IMessage<FromHost_HS44>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FromHost_HS44> _parser = new pb::MessageParser<FromHost_HS44>(() => new FromHost_HS44());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FromHost_HS44> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HS44() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HS44(FromHost_HS44 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HS44 Clone() {
      return new FromHost_HS44(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FromHost_HS44);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FromHost_HS44 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FromHost_HS44 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReplyHost_ES44 : pb::IMessage<ReplyHost_ES44>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReplyHost_ES44> _parser = new pb::MessageParser<ReplyHost_ES44>(() => new ReplyHost_ES44());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplyHost_ES44> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_ES44() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_ES44(ReplyHost_ES44 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_ES44 Clone() {
      return new ReplyHost_ES44(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplyHost_ES44);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplyHost_ES44 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplyHost_ES44 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FromHost_HS48 : pb::IMessage<FromHost_HS48>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FromHost_HS48> _parser = new pb::MessageParser<FromHost_HS48>(() => new FromHost_HS48());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FromHost_HS48> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HS48() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HS48(FromHost_HS48 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      cIMONOFF_ = other.cIMONOFF_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HS48 Clone() {
      return new FromHost_HS48(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CIM_ON_OFF" field.</summary>
    public const int CIMONOFFFieldNumber = 6;
    private string cIMONOFF_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CIMONOFF {
      get { return cIMONOFF_; }
      set {
        cIMONOFF_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FromHost_HS48);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FromHost_HS48 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (CIMONOFF != other.CIMONOFF) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (CIMONOFF.Length != 0) hash ^= CIMONOFF.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CIMONOFF.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CIMONOFF);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CIMONOFF.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CIMONOFF);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (CIMONOFF.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CIMONOFF);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FromHost_HS48 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.CIMONOFF.Length != 0) {
        CIMONOFF = other.CIMONOFF;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CIMONOFF = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CIMONOFF = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReplyHost_ES48 : pb::IMessage<ReplyHost_ES48>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReplyHost_ES48> _parser = new pb::MessageParser<ReplyHost_ES48>(() => new ReplyHost_ES48());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplyHost_ES48> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_ES48() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_ES48(ReplyHost_ES48 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      cODE_ = other.cODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_ES48 Clone() {
      return new ReplyHost_ES48(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CODE" field.</summary>
    public const int CODEFieldNumber = 6;
    private string cODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CODE {
      get { return cODE_; }
      set {
        cODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplyHost_ES48);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplyHost_ES48 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (CODE != other.CODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (CODE.Length != 0) hash ^= CODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (CODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplyHost_ES48 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.CODE.Length != 0) {
        CODE = other.CODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FromHost_HS64 : pb::IMessage<FromHost_HS64>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FromHost_HS64> _parser = new pb::MessageParser<FromHost_HS64>(() => new FromHost_HS64());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FromHost_HS64> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HS64() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HS64(FromHost_HS64 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      rUNMODE_ = other.rUNMODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HS64 Clone() {
      return new FromHost_HS64(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RUN_MODE" field.</summary>
    public const int RUNMODEFieldNumber = 6;
    private string rUNMODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RUNMODE {
      get { return rUNMODE_; }
      set {
        rUNMODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FromHost_HS64);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FromHost_HS64 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (RUNMODE != other.RUNMODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (RUNMODE.Length != 0) hash ^= RUNMODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (RUNMODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RUNMODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (RUNMODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RUNMODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (RUNMODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RUNMODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FromHost_HS64 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.RUNMODE.Length != 0) {
        RUNMODE = other.RUNMODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            RUNMODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            RUNMODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReplyHost_ES64 : pb::IMessage<ReplyHost_ES64>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReplyHost_ES64> _parser = new pb::MessageParser<ReplyHost_ES64>(() => new ReplyHost_ES64());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplyHost_ES64> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_ES64() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_ES64(ReplyHost_ES64 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_ES64 Clone() {
      return new ReplyHost_ES64(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplyHost_ES64);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplyHost_ES64 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplyHost_ES64 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FromHost_HC05 : pb::IMessage<FromHost_HC05>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FromHost_HC05> _parser = new pb::MessageParser<FromHost_HC05>(() => new FromHost_HC05());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FromHost_HC05> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HC05() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HC05(FromHost_HC05 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      pORTID_ = other.pORTID_;
      cAPACITY_ = other.cAPACITY_;
      oTHERCAPACITY_ = other.oTHERCAPACITY_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HC05 Clone() {
      return new FromHost_HC05(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PORT_ID" field.</summary>
    public const int PORTIDFieldNumber = 6;
    private string pORTID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PORTID {
      get { return pORTID_; }
      set {
        pORTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CAPACITY" field.</summary>
    public const int CAPACITYFieldNumber = 7;
    private string cAPACITY_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CAPACITY {
      get { return cAPACITY_; }
      set {
        cAPACITY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OTHER_CAPACITY" field.</summary>
    public const int OTHERCAPACITYFieldNumber = 8;
    private string oTHERCAPACITY_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OTHERCAPACITY {
      get { return oTHERCAPACITY_; }
      set {
        oTHERCAPACITY_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FromHost_HC05);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FromHost_HC05 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (PORTID != other.PORTID) return false;
      if (CAPACITY != other.CAPACITY) return false;
      if (OTHERCAPACITY != other.OTHERCAPACITY) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (PORTID.Length != 0) hash ^= PORTID.GetHashCode();
      if (CAPACITY.Length != 0) hash ^= CAPACITY.GetHashCode();
      if (OTHERCAPACITY.Length != 0) hash ^= OTHERCAPACITY.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (PORTID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PORTID);
      }
      if (CAPACITY.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CAPACITY);
      }
      if (OTHERCAPACITY.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(OTHERCAPACITY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (PORTID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PORTID);
      }
      if (CAPACITY.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CAPACITY);
      }
      if (OTHERCAPACITY.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(OTHERCAPACITY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (PORTID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PORTID);
      }
      if (CAPACITY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CAPACITY);
      }
      if (OTHERCAPACITY.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OTHERCAPACITY);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FromHost_HC05 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.PORTID.Length != 0) {
        PORTID = other.PORTID;
      }
      if (other.CAPACITY.Length != 0) {
        CAPACITY = other.CAPACITY;
      }
      if (other.OTHERCAPACITY.Length != 0) {
        OTHERCAPACITY = other.OTHERCAPACITY;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            PORTID = input.ReadString();
            break;
          }
          case 58: {
            CAPACITY = input.ReadString();
            break;
          }
          case 66: {
            OTHERCAPACITY = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            PORTID = input.ReadString();
            break;
          }
          case 58: {
            CAPACITY = input.ReadString();
            break;
          }
          case 66: {
            OTHERCAPACITY = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReplyHost_EC05 : pb::IMessage<ReplyHost_EC05>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReplyHost_EC05> _parser = new pb::MessageParser<ReplyHost_EC05>(() => new ReplyHost_EC05());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplyHost_EC05> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EC05() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EC05(ReplyHost_EC05 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      cODE_ = other.cODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EC05 Clone() {
      return new ReplyHost_EC05(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CODE" field.</summary>
    public const int CODEFieldNumber = 6;
    private string cODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CODE {
      get { return cODE_; }
      set {
        cODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplyHost_EC05);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplyHost_EC05 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (CODE != other.CODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (CODE.Length != 0) hash ^= CODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (CODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplyHost_EC05 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.CODE.Length != 0) {
        CODE = other.CODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FromHost_HC06 : pb::IMessage<FromHost_HC06>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FromHost_HC06> _parser = new pb::MessageParser<FromHost_HC06>(() => new FromHost_HC06());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FromHost_HC06> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HC06() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HC06(FromHost_HC06 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FromHost_HC06 Clone() {
      return new FromHost_HC06(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FromHost_HC06);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FromHost_HC06 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FromHost_HC06 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReplyHost_EC06 : pb::IMessage<ReplyHost_EC06>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReplyHost_EC06> _parser = new pb::MessageParser<ReplyHost_EC06>(() => new ReplyHost_EC06());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplyHost_EC06> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EC06() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EC06(ReplyHost_EC06 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      cODE_ = other.cODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyHost_EC06 Clone() {
      return new ReplyHost_EC06(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CODE" field.</summary>
    public const int CODEFieldNumber = 6;
    private string cODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CODE {
      get { return cODE_; }
      set {
        cODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplyHost_EC06);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplyHost_EC06 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (CODE != other.CODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (CODE.Length != 0) hash ^= CODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (CODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplyHost_EC06 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.CODE.Length != 0) {
        CODE = other.CODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///From EQ (EAP send to MCS)
  /// </summary>
  public sealed partial class Reply_FromHost_HP11 : pb::IMessage<Reply_FromHost_HP11>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Reply_FromHost_HP11> _parser = new pb::MessageParser<Reply_FromHost_HP11>(() => new Reply_FromHost_HP11());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reply_FromHost_HP11> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HP11() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HP11(Reply_FromHost_HP11 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      cODE_ = other.cODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HP11 Clone() {
      return new Reply_FromHost_HP11(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CODE" field.</summary>
    public const int CODEFieldNumber = 6;
    private string cODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CODE {
      get { return cODE_; }
      set {
        cODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reply_FromHost_HP11);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reply_FromHost_HP11 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (CODE != other.CODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (CODE.Length != 0) hash ^= CODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (CODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reply_FromHost_HP11 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.CODE.Length != 0) {
        CODE = other.CODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendHost_EP11 : pb::IMessage<SendHost_EP11>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendHost_EP11> _parser = new pb::MessageParser<SendHost_EP11>(() => new SendHost_EP11());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendHost_EP11> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_EP11() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_EP11(SendHost_EP11 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      bUFFERID_ = other.bUFFERID_;
      bUNDLEID_ = other.bUNDLEID_;
      sTATUS_ = other.sTATUS_;
      tRAYTYPE_ = other.tRAYTYPE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_EP11 Clone() {
      return new SendHost_EP11(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BUFFER_ID" field.</summary>
    public const int BUFFERIDFieldNumber = 6;
    private string bUFFERID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BUFFERID {
      get { return bUFFERID_; }
      set {
        bUFFERID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BUNDLE_ID" field.</summary>
    public const int BUNDLEIDFieldNumber = 7;
    private string bUNDLEID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BUNDLEID {
      get { return bUNDLEID_; }
      set {
        bUNDLEID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "STATUS" field.</summary>
    public const int STATUSFieldNumber = 8;
    private string sTATUS_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string STATUS {
      get { return sTATUS_; }
      set {
        sTATUS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TRAY_TYPE" field.</summary>
    public const int TRAYTYPEFieldNumber = 9;
    private string tRAYTYPE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TRAYTYPE {
      get { return tRAYTYPE_; }
      set {
        tRAYTYPE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendHost_EP11);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendHost_EP11 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (BUFFERID != other.BUFFERID) return false;
      if (BUNDLEID != other.BUNDLEID) return false;
      if (STATUS != other.STATUS) return false;
      if (TRAYTYPE != other.TRAYTYPE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (BUFFERID.Length != 0) hash ^= BUFFERID.GetHashCode();
      if (BUNDLEID.Length != 0) hash ^= BUNDLEID.GetHashCode();
      if (STATUS.Length != 0) hash ^= STATUS.GetHashCode();
      if (TRAYTYPE.Length != 0) hash ^= TRAYTYPE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (BUFFERID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BUFFERID);
      }
      if (BUNDLEID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BUNDLEID);
      }
      if (STATUS.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(STATUS);
      }
      if (TRAYTYPE.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TRAYTYPE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (BUFFERID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BUFFERID);
      }
      if (BUNDLEID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BUNDLEID);
      }
      if (STATUS.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(STATUS);
      }
      if (TRAYTYPE.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TRAYTYPE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (BUFFERID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BUFFERID);
      }
      if (BUNDLEID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BUNDLEID);
      }
      if (STATUS.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(STATUS);
      }
      if (TRAYTYPE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TRAYTYPE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendHost_EP11 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.BUFFERID.Length != 0) {
        BUFFERID = other.BUFFERID;
      }
      if (other.BUNDLEID.Length != 0) {
        BUNDLEID = other.BUNDLEID;
      }
      if (other.STATUS.Length != 0) {
        STATUS = other.STATUS;
      }
      if (other.TRAYTYPE.Length != 0) {
        TRAYTYPE = other.TRAYTYPE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            BUFFERID = input.ReadString();
            break;
          }
          case 58: {
            BUNDLEID = input.ReadString();
            break;
          }
          case 66: {
            STATUS = input.ReadString();
            break;
          }
          case 74: {
            TRAYTYPE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            BUFFERID = input.ReadString();
            break;
          }
          case 58: {
            BUNDLEID = input.ReadString();
            break;
          }
          case 66: {
            STATUS = input.ReadString();
            break;
          }
          case 74: {
            TRAYTYPE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Reply_FromHost_HW34 : pb::IMessage<Reply_FromHost_HW34>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Reply_FromHost_HW34> _parser = new pb::MessageParser<Reply_FromHost_HW34>(() => new Reply_FromHost_HW34());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reply_FromHost_HW34> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HW34() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HW34(Reply_FromHost_HW34 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      cODE_ = other.cODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HW34 Clone() {
      return new Reply_FromHost_HW34(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CODE" field.</summary>
    public const int CODEFieldNumber = 6;
    private string cODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CODE {
      get { return cODE_; }
      set {
        cODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reply_FromHost_HW34);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reply_FromHost_HW34 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (CODE != other.CODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (CODE.Length != 0) hash ^= CODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (CODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reply_FromHost_HW34 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.CODE.Length != 0) {
        CODE = other.CODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendHost_EW34 : pb::IMessage<SendHost_EW34>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendHost_EW34> _parser = new pb::MessageParser<SendHost_EW34>(() => new SendHost_EW34());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendHost_EW34> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_EW34() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_EW34(SendHost_EW34 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      bUNDLEID_ = other.bUNDLEID_;
      dELETELOCATION_ = other.dELETELOCATION_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_EW34 Clone() {
      return new SendHost_EW34(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BUNDLE_ID" field.</summary>
    public const int BUNDLEIDFieldNumber = 6;
    private string bUNDLEID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BUNDLEID {
      get { return bUNDLEID_; }
      set {
        bUNDLEID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DELETE_LOCATION" field.</summary>
    public const int DELETELOCATIONFieldNumber = 7;
    private string dELETELOCATION_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DELETELOCATION {
      get { return dELETELOCATION_; }
      set {
        dELETELOCATION_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendHost_EW34);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendHost_EW34 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (BUNDLEID != other.BUNDLEID) return false;
      if (DELETELOCATION != other.DELETELOCATION) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (BUNDLEID.Length != 0) hash ^= BUNDLEID.GetHashCode();
      if (DELETELOCATION.Length != 0) hash ^= DELETELOCATION.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (BUNDLEID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BUNDLEID);
      }
      if (DELETELOCATION.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DELETELOCATION);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (BUNDLEID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BUNDLEID);
      }
      if (DELETELOCATION.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DELETELOCATION);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (BUNDLEID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BUNDLEID);
      }
      if (DELETELOCATION.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DELETELOCATION);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendHost_EW34 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.BUNDLEID.Length != 0) {
        BUNDLEID = other.BUNDLEID;
      }
      if (other.DELETELOCATION.Length != 0) {
        DELETELOCATION = other.DELETELOCATION;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            BUNDLEID = input.ReadString();
            break;
          }
          case 58: {
            DELETELOCATION = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            BUNDLEID = input.ReadString();
            break;
          }
          case 58: {
            DELETELOCATION = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Reply_FromHost_HW35 : pb::IMessage<Reply_FromHost_HW35>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Reply_FromHost_HW35> _parser = new pb::MessageParser<Reply_FromHost_HW35>(() => new Reply_FromHost_HW35());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reply_FromHost_HW35> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HW35() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HW35(Reply_FromHost_HW35 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      cODE_ = other.cODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HW35 Clone() {
      return new Reply_FromHost_HW35(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CODE" field.</summary>
    public const int CODEFieldNumber = 6;
    private string cODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CODE {
      get { return cODE_; }
      set {
        cODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reply_FromHost_HW35);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reply_FromHost_HW35 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (CODE != other.CODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (CODE.Length != 0) hash ^= CODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (CODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reply_FromHost_HW35 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.CODE.Length != 0) {
        CODE = other.CODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendHost_EW35 : pb::IMessage<SendHost_EW35>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendHost_EW35> _parser = new pb::MessageParser<SendHost_EW35>(() => new SendHost_EW35());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendHost_EW35> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_EW35() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_EW35(SendHost_EW35 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      tRANSFERTYPE_ = other.tRANSFERTYPE_;
      bUNDLEID_ = other.bUNDLEID_;
      lOCATION_ = other.lOCATION_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_EW35 Clone() {
      return new SendHost_EW35(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TRANSFER_TYPE" field.</summary>
    public const int TRANSFERTYPEFieldNumber = 6;
    private string tRANSFERTYPE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TRANSFERTYPE {
      get { return tRANSFERTYPE_; }
      set {
        tRANSFERTYPE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BUNDLE_ID" field.</summary>
    public const int BUNDLEIDFieldNumber = 7;
    private string bUNDLEID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BUNDLEID {
      get { return bUNDLEID_; }
      set {
        bUNDLEID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LOCATION" field.</summary>
    public const int LOCATIONFieldNumber = 8;
    private string lOCATION_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LOCATION {
      get { return lOCATION_; }
      set {
        lOCATION_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendHost_EW35);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendHost_EW35 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (TRANSFERTYPE != other.TRANSFERTYPE) return false;
      if (BUNDLEID != other.BUNDLEID) return false;
      if (LOCATION != other.LOCATION) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (TRANSFERTYPE.Length != 0) hash ^= TRANSFERTYPE.GetHashCode();
      if (BUNDLEID.Length != 0) hash ^= BUNDLEID.GetHashCode();
      if (LOCATION.Length != 0) hash ^= LOCATION.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (TRANSFERTYPE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TRANSFERTYPE);
      }
      if (BUNDLEID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BUNDLEID);
      }
      if (LOCATION.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(LOCATION);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (TRANSFERTYPE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TRANSFERTYPE);
      }
      if (BUNDLEID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BUNDLEID);
      }
      if (LOCATION.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(LOCATION);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (TRANSFERTYPE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TRANSFERTYPE);
      }
      if (BUNDLEID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BUNDLEID);
      }
      if (LOCATION.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LOCATION);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendHost_EW35 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.TRANSFERTYPE.Length != 0) {
        TRANSFERTYPE = other.TRANSFERTYPE;
      }
      if (other.BUNDLEID.Length != 0) {
        BUNDLEID = other.BUNDLEID;
      }
      if (other.LOCATION.Length != 0) {
        LOCATION = other.LOCATION;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            TRANSFERTYPE = input.ReadString();
            break;
          }
          case 58: {
            BUNDLEID = input.ReadString();
            break;
          }
          case 66: {
            LOCATION = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            TRANSFERTYPE = input.ReadString();
            break;
          }
          case 58: {
            BUNDLEID = input.ReadString();
            break;
          }
          case 66: {
            LOCATION = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Reply_FromHost_HW36 : pb::IMessage<Reply_FromHost_HW36>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Reply_FromHost_HW36> _parser = new pb::MessageParser<Reply_FromHost_HW36>(() => new Reply_FromHost_HW36());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reply_FromHost_HW36> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HW36() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HW36(Reply_FromHost_HW36 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      cODE_ = other.cODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HW36 Clone() {
      return new Reply_FromHost_HW36(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CODE" field.</summary>
    public const int CODEFieldNumber = 6;
    private string cODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CODE {
      get { return cODE_; }
      set {
        cODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reply_FromHost_HW36);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reply_FromHost_HW36 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (CODE != other.CODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (CODE.Length != 0) hash ^= CODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (CODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reply_FromHost_HW36 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.CODE.Length != 0) {
        CODE = other.CODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendHost_EW36 : pb::IMessage<SendHost_EW36>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendHost_EW36> _parser = new pb::MessageParser<SendHost_EW36>(() => new SendHost_EW36());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendHost_EW36> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_EW36() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_EW36(SendHost_EW36 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      lOCATION_ = other.lOCATION_;
      bUNDLEID_ = other.bUNDLEID_;
      eVENTTYPE_ = other.eVENTTYPE_;
      tRAYTYPE_ = other.tRAYTYPE_;
      cODE_ = other.cODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_EW36 Clone() {
      return new SendHost_EW36(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LOCATION" field.</summary>
    public const int LOCATIONFieldNumber = 6;
    private string lOCATION_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LOCATION {
      get { return lOCATION_; }
      set {
        lOCATION_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BUNDLE_ID" field.</summary>
    public const int BUNDLEIDFieldNumber = 7;
    private string bUNDLEID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BUNDLEID {
      get { return bUNDLEID_; }
      set {
        bUNDLEID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EVENT_TYPE" field.</summary>
    public const int EVENTTYPEFieldNumber = 8;
    private string eVENTTYPE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EVENTTYPE {
      get { return eVENTTYPE_; }
      set {
        eVENTTYPE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TRAY_TYPE" field.</summary>
    public const int TRAYTYPEFieldNumber = 9;
    private string tRAYTYPE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TRAYTYPE {
      get { return tRAYTYPE_; }
      set {
        tRAYTYPE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CODE" field.</summary>
    public const int CODEFieldNumber = 10;
    private string cODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CODE {
      get { return cODE_; }
      set {
        cODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendHost_EW36);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendHost_EW36 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (LOCATION != other.LOCATION) return false;
      if (BUNDLEID != other.BUNDLEID) return false;
      if (EVENTTYPE != other.EVENTTYPE) return false;
      if (TRAYTYPE != other.TRAYTYPE) return false;
      if (CODE != other.CODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (LOCATION.Length != 0) hash ^= LOCATION.GetHashCode();
      if (BUNDLEID.Length != 0) hash ^= BUNDLEID.GetHashCode();
      if (EVENTTYPE.Length != 0) hash ^= EVENTTYPE.GetHashCode();
      if (TRAYTYPE.Length != 0) hash ^= TRAYTYPE.GetHashCode();
      if (CODE.Length != 0) hash ^= CODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (LOCATION.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LOCATION);
      }
      if (BUNDLEID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BUNDLEID);
      }
      if (EVENTTYPE.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(EVENTTYPE);
      }
      if (TRAYTYPE.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TRAYTYPE);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (LOCATION.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LOCATION);
      }
      if (BUNDLEID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BUNDLEID);
      }
      if (EVENTTYPE.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(EVENTTYPE);
      }
      if (TRAYTYPE.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TRAYTYPE);
      }
      if (CODE.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (LOCATION.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LOCATION);
      }
      if (BUNDLEID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BUNDLEID);
      }
      if (EVENTTYPE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EVENTTYPE);
      }
      if (TRAYTYPE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TRAYTYPE);
      }
      if (CODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendHost_EW36 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.LOCATION.Length != 0) {
        LOCATION = other.LOCATION;
      }
      if (other.BUNDLEID.Length != 0) {
        BUNDLEID = other.BUNDLEID;
      }
      if (other.EVENTTYPE.Length != 0) {
        EVENTTYPE = other.EVENTTYPE;
      }
      if (other.TRAYTYPE.Length != 0) {
        TRAYTYPE = other.TRAYTYPE;
      }
      if (other.CODE.Length != 0) {
        CODE = other.CODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            LOCATION = input.ReadString();
            break;
          }
          case 58: {
            BUNDLEID = input.ReadString();
            break;
          }
          case 66: {
            EVENTTYPE = input.ReadString();
            break;
          }
          case 74: {
            TRAYTYPE = input.ReadString();
            break;
          }
          case 82: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            LOCATION = input.ReadString();
            break;
          }
          case 58: {
            BUNDLEID = input.ReadString();
            break;
          }
          case 66: {
            EVENTTYPE = input.ReadString();
            break;
          }
          case 74: {
            TRAYTYPE = input.ReadString();
            break;
          }
          case 82: {
            CODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Reply_FromHost_HS45 : pb::IMessage<Reply_FromHost_HS45>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Reply_FromHost_HS45> _parser = new pb::MessageParser<Reply_FromHost_HS45>(() => new Reply_FromHost_HS45());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reply_FromHost_HS45> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HS45() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HS45(Reply_FromHost_HS45 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HS45 Clone() {
      return new Reply_FromHost_HS45(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reply_FromHost_HS45);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reply_FromHost_HS45 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reply_FromHost_HS45 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendHost_ES45 : pb::IMessage<SendHost_ES45>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendHost_ES45> _parser = new pb::MessageParser<SendHost_ES45>(() => new SendHost_ES45());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendHost_ES45> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_ES45() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_ES45(SendHost_ES45 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_ES45 Clone() {
      return new SendHost_ES45(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendHost_ES45);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendHost_ES45 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendHost_ES45 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Reply_FromHost_HS46 : pb::IMessage<Reply_FromHost_HS46>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Reply_FromHost_HS46> _parser = new pb::MessageParser<Reply_FromHost_HS46>(() => new Reply_FromHost_HS46());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reply_FromHost_HS46> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HS46() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HS46(Reply_FromHost_HS46 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HS46 Clone() {
      return new Reply_FromHost_HS46(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reply_FromHost_HS46);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reply_FromHost_HS46 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reply_FromHost_HS46 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendHost_ES46 : pb::IMessage<SendHost_ES46>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendHost_ES46> _parser = new pb::MessageParser<SendHost_ES46>(() => new SendHost_ES46());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendHost_ES46> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_ES46() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_ES46(SendHost_ES46 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      eQUIPMENTSTATUS_ = other.eQUIPMENTSTATUS_;
      cIMMODE_ = other.cIMMODE_;
      rUNMODE_ = other.rUNMODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_ES46 Clone() {
      return new SendHost_ES46(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQUIPMENT_STATUS" field.</summary>
    public const int EQUIPMENTSTATUSFieldNumber = 6;
    private string eQUIPMENTSTATUS_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQUIPMENTSTATUS {
      get { return eQUIPMENTSTATUS_; }
      set {
        eQUIPMENTSTATUS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CIM_MODE" field.</summary>
    public const int CIMMODEFieldNumber = 7;
    private string cIMMODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CIMMODE {
      get { return cIMMODE_; }
      set {
        cIMMODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RUN_MODE" field.</summary>
    public const int RUNMODEFieldNumber = 8;
    private string rUNMODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RUNMODE {
      get { return rUNMODE_; }
      set {
        rUNMODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendHost_ES46);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendHost_ES46 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (EQUIPMENTSTATUS != other.EQUIPMENTSTATUS) return false;
      if (CIMMODE != other.CIMMODE) return false;
      if (RUNMODE != other.RUNMODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (EQUIPMENTSTATUS.Length != 0) hash ^= EQUIPMENTSTATUS.GetHashCode();
      if (CIMMODE.Length != 0) hash ^= CIMMODE.GetHashCode();
      if (RUNMODE.Length != 0) hash ^= RUNMODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (EQUIPMENTSTATUS.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(EQUIPMENTSTATUS);
      }
      if (CIMMODE.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CIMMODE);
      }
      if (RUNMODE.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(RUNMODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (EQUIPMENTSTATUS.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(EQUIPMENTSTATUS);
      }
      if (CIMMODE.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CIMMODE);
      }
      if (RUNMODE.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(RUNMODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (EQUIPMENTSTATUS.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQUIPMENTSTATUS);
      }
      if (CIMMODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CIMMODE);
      }
      if (RUNMODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RUNMODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendHost_ES46 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.EQUIPMENTSTATUS.Length != 0) {
        EQUIPMENTSTATUS = other.EQUIPMENTSTATUS;
      }
      if (other.CIMMODE.Length != 0) {
        CIMMODE = other.CIMMODE;
      }
      if (other.RUNMODE.Length != 0) {
        RUNMODE = other.RUNMODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            EQUIPMENTSTATUS = input.ReadString();
            break;
          }
          case 58: {
            CIMMODE = input.ReadString();
            break;
          }
          case 66: {
            RUNMODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            EQUIPMENTSTATUS = input.ReadString();
            break;
          }
          case 58: {
            CIMMODE = input.ReadString();
            break;
          }
          case 66: {
            RUNMODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Reply_FromHost_HS49 : pb::IMessage<Reply_FromHost_HS49>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Reply_FromHost_HS49> _parser = new pb::MessageParser<Reply_FromHost_HS49>(() => new Reply_FromHost_HS49());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reply_FromHost_HS49> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HS49() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HS49(Reply_FromHost_HS49 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HS49 Clone() {
      return new Reply_FromHost_HS49(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reply_FromHost_HS49);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reply_FromHost_HS49 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reply_FromHost_HS49 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendHost_ES49 : pb::IMessage<SendHost_ES49>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendHost_ES49> _parser = new pb::MessageParser<SendHost_ES49>(() => new SendHost_ES49());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendHost_ES49> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_ES49() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_ES49(SendHost_ES49 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      aLARMSTATUS_ = other.aLARMSTATUS_;
      aLARMLEVEL_ = other.aLARMLEVEL_;
      aLARMCODE_ = other.aLARMCODE_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_ES49 Clone() {
      return new SendHost_ES49(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ALARM_STATUS" field.</summary>
    public const int ALARMSTATUSFieldNumber = 6;
    private string aLARMSTATUS_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ALARMSTATUS {
      get { return aLARMSTATUS_; }
      set {
        aLARMSTATUS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ALARM_LEVEL" field.</summary>
    public const int ALARMLEVELFieldNumber = 7;
    private string aLARMLEVEL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ALARMLEVEL {
      get { return aLARMLEVEL_; }
      set {
        aLARMLEVEL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ALARM_CODE" field.</summary>
    public const int ALARMCODEFieldNumber = 8;
    private string aLARMCODE_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ALARMCODE {
      get { return aLARMCODE_; }
      set {
        aLARMCODE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendHost_ES49);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendHost_ES49 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (ALARMSTATUS != other.ALARMSTATUS) return false;
      if (ALARMLEVEL != other.ALARMLEVEL) return false;
      if (ALARMCODE != other.ALARMCODE) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (ALARMSTATUS.Length != 0) hash ^= ALARMSTATUS.GetHashCode();
      if (ALARMLEVEL.Length != 0) hash ^= ALARMLEVEL.GetHashCode();
      if (ALARMCODE.Length != 0) hash ^= ALARMCODE.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (ALARMSTATUS.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ALARMSTATUS);
      }
      if (ALARMLEVEL.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ALARMLEVEL);
      }
      if (ALARMCODE.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ALARMCODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (ALARMSTATUS.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ALARMSTATUS);
      }
      if (ALARMLEVEL.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ALARMLEVEL);
      }
      if (ALARMCODE.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ALARMCODE);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (ALARMSTATUS.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ALARMSTATUS);
      }
      if (ALARMLEVEL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ALARMLEVEL);
      }
      if (ALARMCODE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ALARMCODE);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendHost_ES49 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.ALARMSTATUS.Length != 0) {
        ALARMSTATUS = other.ALARMSTATUS;
      }
      if (other.ALARMLEVEL.Length != 0) {
        ALARMLEVEL = other.ALARMLEVEL;
      }
      if (other.ALARMCODE.Length != 0) {
        ALARMCODE = other.ALARMCODE;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            ALARMSTATUS = input.ReadString();
            break;
          }
          case 58: {
            ALARMLEVEL = input.ReadString();
            break;
          }
          case 66: {
            ALARMCODE = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            ALARMSTATUS = input.ReadString();
            break;
          }
          case 58: {
            ALARMLEVEL = input.ReadString();
            break;
          }
          case 66: {
            ALARMCODE = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Reply_FromHost_HS54 : pb::IMessage<Reply_FromHost_HS54>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Reply_FromHost_HS54> _parser = new pb::MessageParser<Reply_FromHost_HS54>(() => new Reply_FromHost_HS54());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reply_FromHost_HS54> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HS54() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HS54(Reply_FromHost_HS54 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reply_FromHost_HS54 Clone() {
      return new Reply_FromHost_HS54(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reply_FromHost_HS54);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reply_FromHost_HS54 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reply_FromHost_HS54 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendHost_ES54 : pb::IMessage<SendHost_ES54>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendHost_ES54> _parser = new pb::MessageParser<SendHost_ES54>(() => new SendHost_ES54());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendHost_ES54> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.mirle.ibgAK0.EAP.HostMessage.H2E.AGVCK11H2EReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_ES54() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_ES54(SendHost_ES54 other) : this() {
      fUNCTIONID_ = other.fUNCTIONID_;
      fUNCTIONSEQUENCENO_ = other.fUNCTIONSEQUENCENO_;
      fUNCTIONNAME_ = other.fUNCTIONNAME_;
      eQID_ = other.eQID_;
      rEPORTTIME_ = other.rEPORTTIME_;
      bCRBundleID_ = other.bCRBundleID_;
      virtualBundleID_ = other.virtualBundleID_;
      mATERIALPRESENT_ = other.mATERIALPRESENT_;
      eXECUTIONCMDSEQUENCENO_ = other.eXECUTIONCMDSEQUENCENO_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendHost_ES54 Clone() {
      return new SendHost_ES54(this);
    }

    /// <summary>Field number for the "FUNCTIONID" field.</summary>
    public const int FUNCTIONIDFieldNumber = 1;
    private string fUNCTIONID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONID {
      get { return fUNCTIONID_; }
      set {
        fUNCTIONID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONSEQUENCENO" field.</summary>
    public const int FUNCTIONSEQUENCENOFieldNumber = 2;
    private string fUNCTIONSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONSEQUENCENO {
      get { return fUNCTIONSEQUENCENO_; }
      set {
        fUNCTIONSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FUNCTIONNAME" field.</summary>
    public const int FUNCTIONNAMEFieldNumber = 3;
    private string fUNCTIONNAME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FUNCTIONNAME {
      get { return fUNCTIONNAME_; }
      set {
        fUNCTIONNAME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EQID" field.</summary>
    public const int EQIDFieldNumber = 4;
    private string eQID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EQID {
      get { return eQID_; }
      set {
        eQID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "REPORT_TIME" field.</summary>
    public const int REPORTTIMEFieldNumber = 5;
    private string rEPORTTIME_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string REPORTTIME {
      get { return rEPORTTIME_; }
      set {
        rEPORTTIME_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BCR_Bundle_ID" field.</summary>
    public const int BCRBundleIDFieldNumber = 6;
    private string bCRBundleID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BCRBundleID {
      get { return bCRBundleID_; }
      set {
        bCRBundleID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Virtual_Bundle_ID" field.</summary>
    public const int VirtualBundleIDFieldNumber = 7;
    private string virtualBundleID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VirtualBundleID {
      get { return virtualBundleID_; }
      set {
        virtualBundleID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MATERIAL_PRESENT" field.</summary>
    public const int MATERIALPRESENTFieldNumber = 8;
    private string mATERIALPRESENT_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MATERIALPRESENT {
      get { return mATERIALPRESENT_; }
      set {
        mATERIALPRESENT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EXECUTION_CMD_SEQUENCE_NO" field.</summary>
    public const int EXECUTIONCMDSEQUENCENOFieldNumber = 9;
    private string eXECUTIONCMDSEQUENCENO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EXECUTIONCMDSEQUENCENO {
      get { return eXECUTIONCMDSEQUENCENO_; }
      set {
        eXECUTIONCMDSEQUENCENO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendHost_ES54);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendHost_ES54 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FUNCTIONID != other.FUNCTIONID) return false;
      if (FUNCTIONSEQUENCENO != other.FUNCTIONSEQUENCENO) return false;
      if (FUNCTIONNAME != other.FUNCTIONNAME) return false;
      if (EQID != other.EQID) return false;
      if (REPORTTIME != other.REPORTTIME) return false;
      if (BCRBundleID != other.BCRBundleID) return false;
      if (VirtualBundleID != other.VirtualBundleID) return false;
      if (MATERIALPRESENT != other.MATERIALPRESENT) return false;
      if (EXECUTIONCMDSEQUENCENO != other.EXECUTIONCMDSEQUENCENO) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FUNCTIONID.Length != 0) hash ^= FUNCTIONID.GetHashCode();
      if (FUNCTIONSEQUENCENO.Length != 0) hash ^= FUNCTIONSEQUENCENO.GetHashCode();
      if (FUNCTIONNAME.Length != 0) hash ^= FUNCTIONNAME.GetHashCode();
      if (EQID.Length != 0) hash ^= EQID.GetHashCode();
      if (REPORTTIME.Length != 0) hash ^= REPORTTIME.GetHashCode();
      if (BCRBundleID.Length != 0) hash ^= BCRBundleID.GetHashCode();
      if (VirtualBundleID.Length != 0) hash ^= VirtualBundleID.GetHashCode();
      if (MATERIALPRESENT.Length != 0) hash ^= MATERIALPRESENT.GetHashCode();
      if (EXECUTIONCMDSEQUENCENO.Length != 0) hash ^= EXECUTIONCMDSEQUENCENO.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (BCRBundleID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BCRBundleID);
      }
      if (VirtualBundleID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(VirtualBundleID);
      }
      if (MATERIALPRESENT.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(MATERIALPRESENT);
      }
      if (EXECUTIONCMDSEQUENCENO.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(EXECUTIONCMDSEQUENCENO);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FUNCTIONID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EQID);
      }
      if (REPORTTIME.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(REPORTTIME);
      }
      if (BCRBundleID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BCRBundleID);
      }
      if (VirtualBundleID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(VirtualBundleID);
      }
      if (MATERIALPRESENT.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(MATERIALPRESENT);
      }
      if (EXECUTIONCMDSEQUENCENO.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(EXECUTIONCMDSEQUENCENO);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FUNCTIONID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONID);
      }
      if (FUNCTIONSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONSEQUENCENO);
      }
      if (FUNCTIONNAME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FUNCTIONNAME);
      }
      if (EQID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EQID);
      }
      if (REPORTTIME.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(REPORTTIME);
      }
      if (BCRBundleID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BCRBundleID);
      }
      if (VirtualBundleID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VirtualBundleID);
      }
      if (MATERIALPRESENT.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MATERIALPRESENT);
      }
      if (EXECUTIONCMDSEQUENCENO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EXECUTIONCMDSEQUENCENO);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendHost_ES54 other) {
      if (other == null) {
        return;
      }
      if (other.FUNCTIONID.Length != 0) {
        FUNCTIONID = other.FUNCTIONID;
      }
      if (other.FUNCTIONSEQUENCENO.Length != 0) {
        FUNCTIONSEQUENCENO = other.FUNCTIONSEQUENCENO;
      }
      if (other.FUNCTIONNAME.Length != 0) {
        FUNCTIONNAME = other.FUNCTIONNAME;
      }
      if (other.EQID.Length != 0) {
        EQID = other.EQID;
      }
      if (other.REPORTTIME.Length != 0) {
        REPORTTIME = other.REPORTTIME;
      }
      if (other.BCRBundleID.Length != 0) {
        BCRBundleID = other.BCRBundleID;
      }
      if (other.VirtualBundleID.Length != 0) {
        VirtualBundleID = other.VirtualBundleID;
      }
      if (other.MATERIALPRESENT.Length != 0) {
        MATERIALPRESENT = other.MATERIALPRESENT;
      }
      if (other.EXECUTIONCMDSEQUENCENO.Length != 0) {
        EXECUTIONCMDSEQUENCENO = other.EXECUTIONCMDSEQUENCENO;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            BCRBundleID = input.ReadString();
            break;
          }
          case 58: {
            VirtualBundleID = input.ReadString();
            break;
          }
          case 66: {
            MATERIALPRESENT = input.ReadString();
            break;
          }
          case 74: {
            EXECUTIONCMDSEQUENCENO = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FUNCTIONID = input.ReadString();
            break;
          }
          case 18: {
            FUNCTIONSEQUENCENO = input.ReadString();
            break;
          }
          case 26: {
            FUNCTIONNAME = input.ReadString();
            break;
          }
          case 34: {
            EQID = input.ReadString();
            break;
          }
          case 42: {
            REPORTTIME = input.ReadString();
            break;
          }
          case 50: {
            BCRBundleID = input.ReadString();
            break;
          }
          case 58: {
            VirtualBundleID = input.ReadString();
            break;
          }
          case 66: {
            MATERIALPRESENT = input.ReadString();
            break;
          }
          case 74: {
            EXECUTIONCMDSEQUENCENO = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
